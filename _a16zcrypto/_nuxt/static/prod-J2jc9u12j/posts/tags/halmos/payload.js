__NUXT_JSONP__("/posts/tags/halmos", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct,cu,cv,cw,cx,cy,cz,cA,cB,cC,cD,cE,cF,cG,cH,cI,cJ,cK,cL,cM,cN,cO,cP,cQ,cR,cS,cT,cU,cV,cW,cX,cY,cZ,c_,c$,da,db,dc,dd,de,df,dg,dh,di,dj,dk,dl,dm,dn,do0,dp,dq,dr,ds,dt,du,dv,dw,dx,dy,dz,dA,dB,dC,dD,dE,dF,dG,dH,dI,dJ,dK,dL,dM,dN,dO,dP,dQ,dR,dS,dT,dU,dV,dW,dX,dY,dZ,d_,d$,ea,eb,ec,ed,ee,ef,eg,eh,ei,ej,ek,el,em,en,eo,ep,eq,er,es,et,eu,ev,ew,ex,ey,ez,eA,eB,eC,eD,eE,eF,eG,eH,eI,eJ,eK,eL,eM,eN,eO,eP,eQ,eR,eS,eT,eU,eV,eW,eX,eY,eZ,e_,e$,fa,fb,fc,fd,fe,ff,fg,fh,fi,fj,fk,fl,fm,fn,fo,fp,fq,fr,fs,ft,fu,fv,fw,fx,fy,fz,fA,fB,fC,fD,fE,fF,fG,fH,fI,fJ,fK,fL,fM,fN,fO,fP,fQ,fR,fS,fT){ct.favicon=e;ct.other_icons=e;ct.newsletter_title="newsletter: web3 weekly";ct.newsletter_subtitle="A newsletter from a16z crypto, and your go-to guide to the next internet";ct.newsletter_input_placeholder=cu;ct.newsletter_button_text=cu;ct.podcast_title="podcast: web3 with a16z";ct.podcast_subtitle="A show about building the next internet, from a16z crypto";ct.follow_us_text="Follow us";ct.logo=e;ct.disclaimer="Any investments or portfolio companies mentioned, referred to, or described on this page are not representative of all investments in vehicles managed by a16z and there can be no assurance that the investments will be profitable or that other investments made in the future will have similar characteristics or results. Exits include current and former a16z portfolio companies which have been acquired as well as companies which have undergone an initial public offering or direct public offering of shares. Certain publicly traded companies on this list may still be held in Andreessen Horowitz funds. A list of investments made by funds managed by a16z is available here: https:\u002F\u002Fa16z.com\u002Finvestments\u002F. Excluded from this list are investments for which the issuer has not provided permission for a16z to disclose publicly as well as unannounced investments in publicly traded digital assets. Further, the list of investments is updated monthly and as such may not reflect most recent a16z investments. Past results of Andreessen Horowitz’s investments, pooled investment vehicles, or investment strategies are not necessarily indicative of future results.";ct.copyright="&copy; 2024 Andreessen Horowitz";ct.footer_menu=cv;ct.cookie_banner_text="we use third party cookies in order to personalise your site experience";ct.socials=cw;ct.streaming=cx;ct.header_newsletter_title="Newsletter Sign Up";ct.header_newsletter_input_placeholder="enter email address";ct.header_newsletter_button_text="subscribe";ct.header_socials=e;ct.nav_focus_area_label_text="FOCUS AREAS";ct.nav_focus_areas=[{term_id:a,name:"company building",slug:"company-building",term_group:c,term_taxonomy_id:a,taxonomy:A,description:b,parent:c,count:196,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ffocus-areas\u002Fcompany-building\u002F"},{term_id:cy,name:"tech trends",slug:"tech-trends",term_group:c,term_taxonomy_id:cy,taxonomy:A,description:b,parent:c,count:236,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ffocus-areas\u002Ftech-trends\u002F"},{term_id:cz,name:"policy &amp; regulation",slug:aZ,term_group:c,term_taxonomy_id:cz,taxonomy:A,description:b,parent:c,count:158,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ffocus-areas\u002Fpolicy\u002F"},{term_id:a_,name:C,slug:C,term_group:c,term_taxonomy_id:a_,taxonomy:A,description:b,parent:c,count:cA,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ffocus-areas\u002Fresearch\u002F"},{term_id:B,name:aO,slug:aP,term_group:c,term_taxonomy_id:B,taxonomy:A,description:b,parent:c,count:aQ,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ffocus-areas\u002Fcode-engineering\u002F"}];ct.nav_trending_topics_label_text="TRENDING TOPICS";ct.nav_trending_topics=[{term_id:cB,name:a$,slug:a$,term_group:c,term_taxonomy_id:cB,taxonomy:m,description:b,parent:c,count:19,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ftags\u002Fdecentralization\u002F"},{term_id:cC,name:cD,slug:cE,term_group:c,term_taxonomy_id:cC,taxonomy:m,description:b,parent:c,count:36,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ftags\u002Fzkps-zero-knowledge-proofs-systems-more\u002F"},{term_id:cF,name:ba,slug:ba,term_group:c,term_taxonomy_id:cF,taxonomy:m,description:b,parent:c,count:43,filter:f,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Ftags\u002Fsecurity\u002F"}];ct.view_all_content_button={title:"view all content",url:"\u002Fcontent\u002F",target:b};ct.enable_puzzle=bD;ct.puzzle_code_1=cG;ct.puzzle_code_2=cH;ct.header_css_js_custom="table#releasenotes {\r\n  width: 100% !important;\r\n  border-collapse: collapse ;\r\n  border: 3px solid purple;\r\n}\r\n\r\ntable#releasenotes td {\r\n  width: 50% !important;\r\n  border: 1px black solid ;\r\n  padding: 10px ;\r\n}\r\n\r\ndiv.punch-viewer-navbar-logo {\r\n  display: hidden !important;\r\n}";ct.custom_js_footer=b;ct.header_button=b;ct.companies_eyebrow="CSX COMPANIES";ct.companies_title=b;ct.companies_stats=e;ct.companies_companies=[{company_name:bE,square_logo:{ID:cI,id:cI,title:bE,filename:"afriex.svg",filesize:907,url:I,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fafriex\u002F",alt:b,author:l,description:b,caption:b,name:bE,status:g,uploaded_to:c,date:cJ,modified:cJ,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:I,"thumbnail-width":a,"thumbnail-height":a,medium:I,"medium-width":a,"medium-height":a,medium_large:I,"medium_large-width":a,"medium_large-height":a,large:I,"large-width":a,"large-height":a,"1536x1536":I,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":I,"2048x2048-width":a,"2048x2048-height":a,"medium-size":I,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.afriexapp.com\u002F"},{company_name:bF,square_logo:{ID:cK,id:cK,title:bF,filename:"axal.svg",filesize:1117,url:J,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Faxal\u002F",alt:b,author:l,description:b,caption:b,name:bF,status:g,uploaded_to:c,date:cL,modified:cL,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:J,"thumbnail-width":a,"thumbnail-height":a,medium:J,"medium-width":a,"medium-height":a,medium_large:J,"medium_large-width":a,"medium_large-height":a,large:J,"large-width":a,"large-height":a,"1536x1536":J,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":J,"2048x2048-width":a,"2048x2048-height":a,"medium-size":J,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fax.al"},{company_name:bG,square_logo:{ID:cM,id:cM,title:bG,filename:"bello.svg",filesize:8224,url:K,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fbello\u002F",alt:b,author:l,description:b,caption:b,name:bG,status:g,uploaded_to:c,date:cN,modified:cN,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:K,"thumbnail-width":a,"thumbnail-height":a,medium:K,"medium-width":a,"medium-height":a,medium_large:K,"medium_large-width":a,"medium_large-height":a,large:K,"large-width":a,"large-height":a,"1536x1536":K,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":K,"2048x2048-width":a,"2048x2048-height":a,"medium-size":K,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fbello.lol\u002F"},{company_name:bH,square_logo:{ID:cO,id:cO,title:bH,filename:"blockus.png",filesize:12591,url:aR,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fblockus\u002F",alt:b,author:l,description:b,caption:b,name:bH,status:g,uploaded_to:c,date:cP,modified:cP,menu_order:c,mime_type:cQ,type:h,subtype:cR,icon:i,width:aJ,height:aS,sizes:{thumbnail:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fblockus-150x150.png","thumbnail-width":L,"thumbnail-height":L,medium:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fblockus-259x300.png","medium-width":259,"medium-height":aK,medium_large:aR,"medium_large-width":aJ,"medium_large-height":aS,large:aR,"large-width":aJ,"large-height":aS,"1536x1536":aR,"1536x1536-width":aJ,"1536x1536-height":aS,"2048x2048":aR,"2048x2048-width":aJ,"2048x2048-height":aS,"medium-size":"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fblockus-369x400.png","medium-size-width":aJ,"medium-size-height":cS}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.blockus.gg\u002F"},{company_name:bI,square_logo:{ID:cT,id:cT,title:bI,filename:"capsule.svg",filesize:1539,url:M,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fcapsule\u002F",alt:b,author:l,description:b,caption:b,name:bI,status:g,uploaded_to:c,date:cU,modified:cU,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:M,"thumbnail-width":a,"thumbnail-height":a,medium:M,"medium-width":a,"medium-height":a,medium_large:M,"medium_large-width":a,"medium_large-height":a,large:M,"large-width":a,"large-height":a,"1536x1536":M,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":M,"2048x2048-width":a,"2048x2048-height":a,"medium-size":M,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fusecapsule.com\u002F"},{company_name:"Chain Patrol",square_logo:{ID:cV,id:cV,title:cW,filename:"chainpatrol.svg",filesize:16389,url:N,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fchainpatrol\u002F",alt:b,author:l,description:b,caption:b,name:cW,status:g,uploaded_to:c,date:cX,modified:cX,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:N,"thumbnail-width":a,"thumbnail-height":a,medium:N,"medium-width":a,"medium-height":a,medium_large:N,"medium_large-width":a,"medium_large-height":a,large:N,"large-width":a,"large-height":a,"1536x1536":N,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":N,"2048x2048-width":a,"2048x2048-height":a,"medium-size":N,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fchainpatrol.io\u002F"},{company_name:"Collar Networks",square_logo:{ID:cY,id:cY,title:"Collar_Wordmark_Yellow - Michael Moulton",filename:"Collar_Wordmark_Yellow-Michael-Moulton.svg",filesize:12535,url:O,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fcollar_wordmark_yellow-michael-moulton\u002F",alt:b,author:t,description:b,caption:b,name:"collar_wordmark_yellow-michael-moulton",status:g,uploaded_to:c,date:cZ,modified:cZ,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:O,"thumbnail-width":a,"thumbnail-height":a,medium:O,"medium-width":a,"medium-height":a,medium_large:O,"medium_large-width":a,"medium_large-height":a,large:O,"large-width":a,"large-height":a,"1536x1536":O,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":O,"2048x2048-width":a,"2048x2048-height":a,"medium-size":O,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:b},{company_name:"Compass Labs",square_logo:{ID:c_,id:c_,title:"logo_nooutline_width60 (1) - Elisabeth Duijnstee",filename:"logo_nooutline_width60-1-Elisabeth-Duijnstee.svg",filesize:1408,url:P,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Flogo_nooutline_width60-1-elisabeth-duijnstee\u002F",alt:b,author:t,description:b,caption:b,name:"logo_nooutline_width60-1-elisabeth-duijnstee",status:g,uploaded_to:c,date:c$,modified:c$,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:P,"thumbnail-width":a,"thumbnail-height":a,medium:P,"medium-width":a,"medium-height":a,medium_large:P,"medium_large-width":a,"medium_large-height":a,large:P,"large-width":a,"large-height":a,"1536x1536":P,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":P,"2048x2048-width":a,"2048x2048-height":a,"medium-size":P,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.compasslabs.ai\u002F"},{company_name:"Discove",square_logo:{ID:da,id:da,title:db,filename:"discove.svg",filesize:4541,url:Q,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fdiscove\u002F",alt:b,author:l,description:b,caption:b,name:db,status:g,uploaded_to:c,date:dc,modified:dc,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:Q,"thumbnail-width":a,"thumbnail-height":a,medium:Q,"medium-width":a,"medium-height":a,medium_large:Q,"medium_large-width":a,"medium_large-height":a,large:Q,"large-width":a,"large-height":a,"1536x1536":Q,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":Q,"2048x2048-width":a,"2048x2048-height":a,"medium-size":Q,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fdiscove.xyz"},{company_name:"EthXY",square_logo:{ID:dd,id:dd,title:"ethxy-dark - J Eth",filename:"ethxy-dark-J-Eth.svg",filesize:19156,url:R,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fethxy-dark-j-eth\u002F",alt:b,author:t,description:b,caption:b,name:"ethxy-dark-j-eth",status:g,uploaded_to:c,date:de,modified:de,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:R,"thumbnail-width":a,"thumbnail-height":a,medium:R,"medium-width":a,"medium-height":a,medium_large:R,"medium_large-width":a,"medium_large-height":a,large:R,"large-width":a,"large-height":a,"1536x1536":R,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":R,"2048x2048-width":a,"2048x2048-height":a,"medium-size":R,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fethxy.com"},{company_name:bJ,square_logo:{ID:df,id:df,title:bJ,filename:"id.svg",filesize:2287,url:S,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fid\u002F",alt:b,author:l,description:b,caption:b,name:bJ,status:g,uploaded_to:c,date:dg,modified:dg,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:S,"thumbnail-width":a,"thumbnail-height":a,medium:S,"medium-width":a,"medium-height":a,medium_large:S,"medium_large-width":a,"medium_large-height":a,large:S,"large-width":a,"large-height":a,"1536x1536":S,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":S,"2048x2048-width":a,"2048x2048-height":a,"medium-size":S,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:b},{company_name:"Fan Craze",square_logo:{ID:dh,id:dh,title:di,filename:"fancraze.svg",filesize:1051,url:T,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Ffancraze\u002F",alt:b,author:l,description:b,caption:b,name:di,status:g,uploaded_to:c,date:dj,modified:dj,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:T,"thumbnail-width":a,"thumbnail-height":a,medium:T,"medium-width":a,"medium-height":a,medium_large:T,"medium_large-width":a,"medium_large-height":a,large:T,"large-width":a,"large-height":a,"1536x1536":T,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":T,"2048x2048-width":a,"2048x2048-height":a,"medium-size":T,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.fancraze.com\u002F"},{company_name:"FINE",square_logo:{ID:dk,id:dk,title:dl,filename:"fine.svg",filesize:848,url:U,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Ffine\u002F",alt:b,author:l,description:b,caption:b,name:dl,status:g,uploaded_to:c,date:dm,modified:dm,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:U,"thumbnail-width":a,"thumbnail-height":a,medium:U,"medium-width":a,"medium-height":a,medium_large:U,"medium_large-width":a,"medium_large-height":a,large:U,"large-width":a,"large-height":a,"1536x1536":U,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":U,"2048x2048-width":a,"2048x2048-height":a,"medium-size":U,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:b},{company_name:bK,square_logo:{ID:dn,id:dn,title:bK,filename:"flashbot.svg",filesize:1011,url:V,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fflashbot\u002F",alt:b,author:l,description:b,caption:b,name:bK,status:g,uploaded_to:c,date:do0,modified:do0,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:V,"thumbnail-width":a,"thumbnail-height":a,medium:V,"medium-width":a,"medium-height":a,medium_large:V,"medium_large-width":a,"medium_large-height":a,large:V,"large-width":a,"large-height":a,"1536x1536":V,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":V,"2048x2048-width":a,"2048x2048-height":a,"medium-size":V,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:b},{company_name:"Formless",square_logo:{ID:dp,id:dp,title:dq,filename:"formless.svg",filesize:1233,url:W,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fformless\u002F",alt:b,author:l,description:b,caption:b,name:dq,status:g,uploaded_to:c,date:dr,modified:dr,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:W,"thumbnail-width":a,"thumbnail-height":a,medium:W,"medium-width":a,"medium-height":a,medium_large:W,"medium_large-width":a,"medium_large-height":a,large:W,"large-width":a,"large-height":a,"1536x1536":W,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":W,"2048x2048-width":a,"2048x2048-height":a,"medium-size":W,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fformless.xyz"},{company_name:"Frens",square_logo:{ID:ds,id:ds,title:dt,filename:"frens.svg",filesize:876,url:X,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Ffrens\u002F",alt:b,author:l,description:b,caption:b,name:dt,status:g,uploaded_to:c,date:du,modified:du,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:X,"thumbnail-width":a,"thumbnail-height":a,medium:X,"medium-width":a,"medium-height":a,medium_large:X,"medium_large-width":a,"medium_large-height":a,large:X,"large-width":a,"large-height":a,"1536x1536":X,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":X,"2048x2048-width":a,"2048x2048-height":a,"medium-size":X,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"frens.lol"},{company_name:"Fuul",square_logo:{ID:dv,id:dv,title:dw,filename:"fuul.svg",filesize:3228,url:Y,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Ffuul\u002F",alt:b,author:l,description:b,caption:b,name:dw,status:g,uploaded_to:c,date:dx,modified:dx,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:Y,"thumbnail-width":a,"thumbnail-height":a,medium:Y,"medium-width":a,"medium-height":a,medium_large:Y,"medium_large-width":a,"medium_large-height":a,large:Y,"large-width":a,"large-height":a,"1536x1536":Y,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":Y,"2048x2048-width":a,"2048x2048-height":a,"medium-size":Y,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"http:\u002F\u002Fwww.fuul.xyz"},{company_name:bL,square_logo:{ID:dy,id:dy,title:bL,filename:"gandalf.svg",filesize:1634,url:Z,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fgandalf\u002F",alt:b,author:l,description:b,caption:b,name:bL,status:g,uploaded_to:c,date:dz,modified:dz,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:Z,"thumbnail-width":a,"thumbnail-height":a,medium:Z,"medium-width":a,"medium-height":a,medium_large:Z,"medium_large-width":a,"medium_large-height":a,large:Z,"large-width":a,"large-height":a,"1536x1536":Z,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":Z,"2048x2048-width":a,"2048x2048-height":a,"medium-size":Z,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fgandalf.network\u002F"},{company_name:"Goldfinch",square_logo:{ID:dA,id:dA,title:"goldfinch",filename:"goldfinch.svg",filesize:3085,url:_,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fgoldfinch-2\u002F",alt:b,author:l,description:b,caption:b,name:"goldfinch-2",status:g,uploaded_to:c,date:dB,modified:dB,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:_,"thumbnail-width":a,"thumbnail-height":a,medium:_,"medium-width":a,"medium-height":a,medium_large:_,"medium_large-width":a,"medium_large-height":a,large:_,"large-width":a,"large-height":a,"1536x1536":_,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":_,"2048x2048-width":a,"2048x2048-height":a,"medium-size":_,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fgoldfinch.finance\u002F"},{company_name:bM,square_logo:{ID:dC,id:dC,title:bM,filename:"iyk.svg",filesize:758,url:$,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fiyk\u002F",alt:b,author:l,description:b,caption:b,name:bM,status:g,uploaded_to:c,date:dD,modified:dD,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:$,"thumbnail-width":a,"thumbnail-height":a,medium:$,"medium-width":a,"medium-height":a,medium_large:$,"medium_large-width":a,"medium_large-height":a,large:$,"large-width":a,"large-height":a,"1536x1536":$,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":$,"2048x2048-width":a,"2048x2048-height":a,"medium-size":$,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fiyk.app\u002F"},{company_name:dE,square_logo:{ID:dF,id:dF,title:dE,filename:"kiki.svg",filesize:1785,url:aa,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fkiki-2\u002F",alt:b,author:l,description:b,caption:b,name:"kiki-2",status:g,uploaded_to:c,date:dG,modified:dG,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:aa,"thumbnail-width":a,"thumbnail-height":a,medium:aa,"medium-width":a,"medium-height":a,medium_large:aa,"medium_large-width":a,"medium_large-height":a,large:aa,"large-width":a,"large-height":a,"1536x1536":aa,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":aa,"2048x2048-width":a,"2048x2048-height":a,"medium-size":aa,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.kiki.world\u002F"},{company_name:"Magicblock",square_logo:{ID:dH,id:dH,title:"magicblock_white (1) - Andrea Fortugno",filename:"magicblock_white-1-Andrea-Fortugno.svg",filesize:9784,url:ab,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fmagicblock_white-1-andrea-fortugno\u002F",alt:b,author:t,description:b,caption:b,name:"magicblock_white-1-andrea-fortugno",status:g,uploaded_to:c,date:dI,modified:dI,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ab,"thumbnail-width":a,"thumbnail-height":a,medium:ab,"medium-width":a,"medium-height":a,medium_large:ab,"medium_large-width":a,"medium_large-height":a,large:ab,"large-width":a,"large-height":a,"1536x1536":ab,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ab,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ab,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.magicblock.gg\u002F"},{company_name:bN,square_logo:{ID:dJ,id:dJ,title:bN,filename:"mbd.svg",filesize:2670,url:ac,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fmbd\u002F",alt:b,author:l,description:b,caption:b,name:bN,status:g,uploaded_to:c,date:bb,modified:bb,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ac,"thumbnail-width":a,"thumbnail-height":a,medium:ac,"medium-width":a,"medium-height":a,medium_large:ac,"medium_large-width":a,"medium_large-height":a,large:ac,"large-width":a,"large-height":a,"1536x1536":ac,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ac,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ac,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:b},{company_name:bO,square_logo:{ID:dK,id:dK,title:bO,filename:"mentaport.svg",filesize:878,url:ad,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fmentaport\u002F",alt:b,author:l,description:b,caption:b,name:bO,status:g,uploaded_to:c,date:bb,modified:bb,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ad,"thumbnail-width":a,"thumbnail-height":a,medium:ad,"medium-width":a,"medium-height":a,medium_large:ad,"medium_large-width":a,"medium_large-height":a,large:ad,"large-width":a,"large-height":a,"1536x1536":ad,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ad,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ad,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.mentaport.com\u002F"},{company_name:bP,square_logo:{ID:dL,id:dL,title:bP,filename:"mir.svg",filesize:1130,url:ae,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fmir\u002F",alt:b,author:l,description:b,caption:b,name:bP,status:g,uploaded_to:c,date:bc,modified:bc,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ae,"thumbnail-width":a,"thumbnail-height":a,medium:ae,"medium-width":a,"medium-height":a,medium_large:ae,"medium_large-width":a,"medium_large-height":a,large:ae,"large-width":a,"large-height":a,"1536x1536":ae,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ae,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ae,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:b},{company_name:bQ,square_logo:{ID:dM,id:dM,title:bQ,filename:"narval.svg",filesize:3111,url:af,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fnarval\u002F",alt:b,author:l,description:b,caption:b,name:bQ,status:g,uploaded_to:c,date:bc,modified:bc,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:af,"thumbnail-width":a,"thumbnail-height":a,medium:af,"medium-width":a,"medium-height":a,medium_large:af,"medium_large-width":a,"medium_large-height":a,large:af,"large-width":a,"large-height":a,"1536x1536":af,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":af,"2048x2048-width":a,"2048x2048-height":a,"medium-size":af,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"http:\u002F\u002Fnarval.xyz"},{company_name:"Nebra",square_logo:{ID:dN,id:dN,title:"NEBRA_logo_1 - Shumo Chu",filename:"NEBRA_logo_1-Shumo-Chu.svg",filesize:2102,url:ag,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fnebra_logo_1-shumo-chu\u002F",alt:b,author:t,description:b,caption:b,name:"nebra_logo_1-shumo-chu",status:g,uploaded_to:c,date:dO,modified:dO,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ag,"thumbnail-width":a,"thumbnail-height":a,medium:ag,"medium-width":a,"medium-height":a,medium_large:ag,"medium_large-width":a,"medium_large-height":a,large:ag,"large-width":a,"large-height":a,"1536x1536":ag,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ag,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ag,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"nebra.one"},{company_name:"Neynar",square_logo:{ID:dP,id:dP,title:"Frame 27 - Rishav Mukherji",filename:"Frame-27-Rishav-Mukherji.svg",filesize:4170,url:ah,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fframe-27-rishav-mukherji\u002F",alt:b,author:t,description:b,caption:b,name:"frame-27-rishav-mukherji",status:g,uploaded_to:c,date:dQ,modified:dQ,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ah,"thumbnail-width":a,"thumbnail-height":a,medium:ah,"medium-width":a,"medium-height":a,medium_large:ah,"medium_large-width":a,"medium_large-height":a,large:ah,"large-width":a,"large-height":a,"1536x1536":ah,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ah,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ah,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"http:\u002F\u002Fneynar.com"},{company_name:"Nodekit",square_logo:{ID:dR,id:dR,title:"NodeKit Logo - Atomic Abyss (1) - Nick Preszler",filename:"NodeKit-Logo-Atomic-Abyss-1-Nick-Preszler.svg",filesize:4216,url:ai,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fnodekit-logo-atomic-abyss-1-nick-preszler\u002F",alt:b,author:t,description:b,caption:b,name:"nodekit-logo-atomic-abyss-1-nick-preszler",status:g,uploaded_to:c,date:dS,modified:dS,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ai,"thumbnail-width":a,"thumbnail-height":a,medium:ai,"medium-width":a,"medium-height":a,medium_large:ai,"medium_large-width":a,"medium_large-height":a,large:ai,"large-width":a,"large-height":a,"1536x1536":ai,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ai,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ai,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"http:\u002F\u002Fnodekit.xyz"},{company_name:"notional finance",square_logo:{ID:dT,id:dT,title:dU,filename:"notion-finance.svg",filesize:1843,url:aj,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fnotion-finance\u002F",alt:b,author:l,description:b,caption:b,name:dU,status:g,uploaded_to:c,date:bd,modified:bd,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:aj,"thumbnail-width":a,"thumbnail-height":a,medium:aj,"medium-width":a,"medium-height":a,medium_large:aj,"medium_large-width":a,"medium_large-height":a,large:aj,"large-width":a,"large-height":a,"1536x1536":aj,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":aj,"2048x2048-width":a,"2048x2048-height":a,"medium-size":aj,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fnotional.finance\u002F"},{company_name:"OpenTrade",square_logo:{ID:dV,id:dV,title:"OpenTrade-logo (2) - David Sutter",filename:"OpenTrade-logo-2-David-Sutter.svg",filesize:4133,url:ak,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fopentrade-logo-2-david-sutter\u002F",alt:b,author:t,description:b,caption:b,name:"opentrade-logo-2-david-sutter",status:g,uploaded_to:c,date:dW,modified:dW,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ak,"thumbnail-width":a,"thumbnail-height":a,medium:ak,"medium-width":a,"medium-height":a,medium_large:ak,"medium_large-width":a,"medium_large-height":a,large:ak,"large-width":a,"large-height":a,"1536x1536":ak,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ak,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ak,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.opentrade.io\u002F"},{company_name:dX,square_logo:{ID:dY,id:dY,title:dX,filename:"phantom.svg",filesize:1842,url:al,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fphantom-2\u002F",alt:b,author:l,description:b,caption:b,name:"phantom-2",status:g,uploaded_to:c,date:bd,modified:bd,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:al,"thumbnail-width":a,"thumbnail-height":a,medium:al,"medium-width":a,"medium-height":a,medium_large:al,"medium_large-width":a,"medium_large-height":a,large:al,"large-width":a,"large-height":a,"1536x1536":al,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":al,"2048x2048-width":a,"2048x2048-height":a,"medium-size":al,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fphantom.app\u002F"},{company_name:dZ,square_logo:{ID:d_,id:d_,title:dZ,filename:"pimlico.svg",filesize:4377,url:am,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fpimlico-2\u002F",alt:b,author:l,description:b,caption:b,name:"pimlico-2",status:g,uploaded_to:c,date:be,modified:be,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:am,"thumbnail-width":a,"thumbnail-height":a,medium:am,"medium-width":a,"medium-height":a,medium_large:am,"medium_large-width":a,"medium_large-height":a,large:am,"large-width":a,"large-height":a,"1536x1536":am,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":am,"2048x2048-width":a,"2048x2048-height":a,"medium-size":am,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.pimlico.io\u002F"},{company_name:"Playmint",square_logo:{ID:d$,id:d$,title:"Playmint_Logo_Export_Colour_Black - Luke Gibson",filename:"Playmint_Logo_Export_Colour_Black-Luke-Gibson.svg",filesize:6812,url:an,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fcsx\u002Fplaymint_logo_export_colour_black-luke-gibson\u002F",alt:b,author:t,description:b,caption:b,name:"playmint_logo_export_colour_black-luke-gibson",status:g,uploaded_to:ea,date:"2024-09-03 23:34:57",modified:"2024-09-04 22:32:11",menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:an,"thumbnail-width":a,"thumbnail-height":a,medium:an,"medium-width":a,"medium-height":a,medium_large:an,"medium_large-width":a,"medium_large-height":a,large:an,"large-width":a,"large-height":a,"1536x1536":an,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":an,"2048x2048-width":a,"2048x2048-height":a,"medium-size":an,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fplaymint.com\u002F"},{company_name:bR,square_logo:{ID:eb,id:eb,title:bR,filename:"primev.svg",filesize:1684,url:ao,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fprimev\u002F",alt:b,author:l,description:b,caption:b,name:bR,status:g,uploaded_to:c,date:be,modified:be,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ao,"thumbnail-width":a,"thumbnail-height":a,medium:ao,"medium-width":a,"medium-height":a,medium_large:ao,"medium_large-width":a,"medium_large-height":a,large:ao,"large-width":a,"large-height":a,"1536x1536":ao,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ao,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ao,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fprimev.xyz\u002F"},{company_name:"Roux",square_logo:{ID:ec,id:ec,title:"Roux_logo_castiron - Lisa Grimm",filename:"Roux_logo_castiron-Lisa-Grimm.svg",filesize:36761,url:ap,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fcsx\u002Froux_logo_castiron-lisa-grimm\u002F",alt:b,author:t,description:b,caption:b,name:"roux_logo_castiron-lisa-grimm",status:g,uploaded_to:ea,date:"2024-09-03 23:35:45",modified:"2024-09-04 22:32:12",menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ap,"thumbnail-width":a,"thumbnail-height":a,medium:ap,"medium-width":a,"medium-height":a,medium_large:ap,"medium_large-width":a,"medium_large-height":a,large:ap,"large-width":a,"large-height":a,"1536x1536":ap,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ap,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ap,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"www.roux.app"},{company_name:bS,square_logo:{ID:ed,id:ed,title:bS,filename:"shield.svg",filesize:2662,url:aq,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fshield\u002F",alt:b,author:l,description:b,caption:b,name:bS,status:g,uploaded_to:c,date:bf,modified:bf,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:aq,"thumbnail-width":a,"thumbnail-height":a,medium:aq,"medium-width":a,"medium-height":a,medium_large:aq,"medium_large-width":a,"medium_large-height":a,large:aq,"large-width":a,"large-height":a,"1536x1536":aq,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":aq,"2048x2048-width":a,"2048x2048-height":a,"medium-size":aq,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"http:\u002F\u002Fgetshield.xyz"},{company_name:"Siren",square_logo:{ID:ee,id:ee,title:"siren_Logo_black (1) - Andrei Anisimov",filename:"siren_Logo_black-1-Andrei-Anisimov.svg",filesize:2329,url:ar,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fsiren_logo_black-1-andrei-anisimov\u002F",alt:b,author:t,description:b,caption:b,name:"siren_logo_black-1-andrei-anisimov",status:g,uploaded_to:c,date:ef,modified:ef,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ar,"thumbnail-width":a,"thumbnail-height":a,medium:ar,"medium-width":a,"medium-height":a,medium_large:ar,"medium_large-width":a,"medium_large-height":a,large:ar,"large-width":a,"large-height":a,"1536x1536":ar,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ar,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ar,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fsiren.xyz\u002F"},{company_name:bT,square_logo:{ID:eg,id:eg,title:bT,filename:"skylab.svg",filesize:2674,url:as,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fskylab\u002F",alt:b,author:l,description:b,caption:b,name:bT,status:g,uploaded_to:c,date:bf,modified:bf,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:as,"thumbnail-width":a,"thumbnail-height":a,medium:as,"medium-width":a,"medium-height":a,medium_large:as,"medium_large-width":a,"medium_large-height":a,large:as,"large-width":a,"large-height":a,"1536x1536":as,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":as,"2048x2048-width":a,"2048x2048-height":a,"medium-size":as,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.skylab.xyz\u002F"},{company_name:"Spire",square_logo:{ID:eh,id:eh,title:"transparent - Kaito Yanai",filename:"transparent-Kaito-Yanai.svg",filesize:2085,url:at,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Ftransparent-kaito-yanai\u002F",alt:b,author:t,description:b,caption:b,name:"transparent-kaito-yanai",status:g,uploaded_to:c,date:ei,modified:ei,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:at,"thumbnail-width":a,"thumbnail-height":a,medium:at,"medium-width":a,"medium-height":a,medium_large:at,"medium_large-width":a,"medium_large-height":a,large:at,"large-width":a,"large-height":a,"1536x1536":at,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":at,"2048x2048-width":a,"2048x2048-height":a,"medium-size":at,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.spire.dev\u002F"},{company_name:bU,square_logo:{ID:ej,id:ej,title:bU,filename:"spring.svg",filesize:13520,url:au,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fspring\u002F",alt:b,author:l,description:b,caption:b,name:bU,status:g,uploaded_to:c,date:bg,modified:bg,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:au,"thumbnail-width":a,"thumbnail-height":a,medium:au,"medium-width":a,"medium-height":a,medium_large:au,"medium_large-width":a,"medium_large-height":a,large:au,"large-width":a,"large-height":a,"1536x1536":au,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":au,"2048x2048-width":a,"2048x2048-height":a,"medium-size":au,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fspringinafrica.com"},{company_name:bV,square_logo:{ID:ek,id:ek,title:bV,filename:"stackr.svg",filesize:4351,url:av,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fstackr\u002F",alt:b,author:l,description:b,caption:b,name:bV,status:g,uploaded_to:c,date:bg,modified:bg,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:av,"thumbnail-width":a,"thumbnail-height":a,medium:av,"medium-width":a,"medium-height":a,medium_large:av,"medium_large-width":a,"medium_large-height":a,large:av,"large-width":a,"large-height":a,"1536x1536":av,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":av,"2048x2048-width":a,"2048x2048-height":a,"medium-size":av,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.stackrlabs.xyz"},{company_name:el,square_logo:{ID:em,id:em,title:el,filename:"teller-1.svg",filesize:1081,url:aw,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fteller-2\u002F",alt:b,author:l,description:b,caption:b,name:"teller-2",status:g,uploaded_to:c,date:bh,modified:bh,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:aw,"thumbnail-width":a,"thumbnail-height":a,medium:aw,"medium-width":a,"medium-height":a,medium_large:aw,"medium_large-width":a,"medium_large-height":a,large:aw,"large-width":a,"large-height":a,"1536x1536":aw,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":aw,"2048x2048-width":a,"2048x2048-height":a,"medium-size":aw,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.teller.org\u002F"},{company_name:"Titles",square_logo:e,full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Ftitles.xyz"},{company_name:"Tranched",square_logo:{ID:en,id:en,title:eo,filename:"logo_black.svg",filesize:7536,url:ax,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Flogo_black\u002F",alt:b,author:t,description:b,caption:b,name:eo,status:g,uploaded_to:c,date:ep,modified:ep,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ax,"thumbnail-width":a,"thumbnail-height":a,medium:ax,"medium-width":a,"medium-height":a,medium_large:ax,"medium_large-width":a,"medium_large-height":a,large:ax,"large-width":a,"large-height":a,"1536x1536":ax,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ax,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ax,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Ftranched.fi\u002F"},{company_name:"triangle labs",square_logo:{ID:eq,id:eq,title:er,filename:"triangle-labs.svg",filesize:13036,url:ay,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Ftriangle-labs\u002F",alt:b,author:l,description:b,caption:b,name:er,status:g,uploaded_to:c,date:bh,modified:bh,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:ay,"thumbnail-width":a,"thumbnail-height":a,medium:ay,"medium-width":a,"medium-height":a,medium_large:ay,"medium_large-width":a,"medium_large-height":a,large:ay,"large-width":a,"large-height":a,"1536x1536":ay,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":ay,"2048x2048-width":a,"2048x2048-height":a,"medium-size":ay,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:b},{company_name:"Tweed",square_logo:{ID:es,id:es,title:"logo (1) - Michelle Latzer",filename:"logo-1-Michelle-Latzer.svg",filesize:2925,url:az,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Flogo-1-michelle-latzer\u002F",alt:b,author:t,description:b,caption:b,name:"logo-1-michelle-latzer",status:g,uploaded_to:c,date:et,modified:et,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:az,"thumbnail-width":a,"thumbnail-height":a,medium:az,"medium-width":a,"medium-height":a,medium_large:az,"medium_large-width":a,"medium_large-height":a,large:az,"large-width":a,"large-height":a,"1536x1536":az,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":az,"2048x2048-width":a,"2048x2048-height":a,"medium-size":az,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"www.paytweed.com"},{company_name:"web 3 analytics",square_logo:{ID:eu,id:eu,title:ev,filename:"web3analytics.svg",filesize:2502,url:aA,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fweb3analytics\u002F",alt:b,author:l,description:b,caption:b,name:ev,status:g,uploaded_to:c,date:bi,modified:bi,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:aA,"thumbnail-width":a,"thumbnail-height":a,medium:aA,"medium-width":a,"medium-height":a,medium_large:aA,"medium_large-width":a,"medium_large-height":a,large:aA,"large-width":a,"large-height":a,"1536x1536":aA,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":aA,"2048x2048-width":a,"2048x2048-height":a,"medium-size":aA,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fwww.web3analytic.xyz\u002F"},{company_name:"zero dev",square_logo:{ID:ew,id:ew,title:ex,filename:"zero-dev.svg",filesize:2378,url:aB,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fzero-dev\u002F",alt:b,author:l,description:b,caption:b,name:ex,status:g,uploaded_to:c,date:bi,modified:bi,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:aB,"thumbnail-width":a,"thumbnail-height":a,medium:aB,"medium-width":a,"medium-height":a,medium_large:aB,"medium_large-width":a,"medium_large-height":a,large:aB,"large-width":a,"large-height":a,"1536x1536":aB,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":aB,"2048x2048-width":a,"2048x2048-height":a,"medium-size":aB,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"https:\u002F\u002Fzerodev.app\u002F"},{company_name:"zkSpin",square_logo:{ID:ey,id:ey,title:"zkSpin Logo - Justin Zhang",filename:"zkSpin-Logo-Justin-Zhang.svg",filesize:4206,url:aC,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fzkspin-logo-justin-zhang\u002F",alt:b,author:t,description:b,caption:b,name:"zkspin-logo-justin-zhang",status:g,uploaded_to:c,date:ez,modified:ez,menu_order:c,mime_type:j,type:h,subtype:k,icon:i,width:c,height:c,sizes:{thumbnail:aC,"thumbnail-width":a,"thumbnail-height":a,medium:aC,"medium-width":a,"medium-height":a,medium_large:aC,"medium_large-width":a,"medium_large-height":a,large:aC,"large-width":a,"large-height":a,"1536x1536":aC,"1536x1536-width":a,"1536x1536-height":a,"2048x2048":aC,"2048x2048-width":a,"2048x2048-height":a,"medium-size":aC,"medium-size-width":a,"medium-size-height":a}},full_logo:e,x:b,linkedin:b,website:"http:\u002F\u002Fwww.zkspin.xyz"}];ct.cta_background={ID:eA,id:eA,title:eB,filename:"cta-backgrtound.png",filesize:509739,url:bW,link:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fcta-backgrtound\u002F",alt:b,author:l,description:b,caption:b,name:eB,status:g,uploaded_to:c,date:eC,modified:eC,menu_order:c,mime_type:cQ,type:h,subtype:cR,icon:i,width:bX,height:bY,sizes:{thumbnail:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fcta-backgrtound-150x150.png","thumbnail-width":L,"thumbnail-height":L,medium:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fcta-backgrtound-300x142.png","medium-width":aK,"medium-height":142,medium_large:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fcta-backgrtound-768x365.png","medium_large-width":768,"medium_large-height":365,large:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fcta-backgrtound-1024x486.png","large-width":aT,"large-height":486,"1536x1536":bW,"1536x1536-width":bX,"1536x1536-height":bY,"2048x2048":bW,"2048x2048-width":bX,"2048x2048-height":bY,"medium-size":"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fcta-backgrtound-600x400.png","medium-size-width":600,"medium-size-height":cS}};ct.cta_eyebrow=b;ct.cta_title=b;ct.cta_description=b;ct.cta_button=b;ct.csx_subscription_placeholder="Enter your email";ct.csx_subscription_button_text="subscribe for updates";ct.csx_subscription_thank_you="You're subscribed!";ct.vo_form_disclosure="\u003Cp\u003EThis content is provided for informational purposes only, and should not be relied upon as legal, business, investment, or tax advice. You should consult your own advisers as to those matters. References to any securities or digital assets are for illustrative purposes only, and do not constitute an investment recommendation or offer to provide investment advisory services. Furthermore, this content is not directed at nor intended for use by any investors or prospective investors, and may not under any circumstances be relied upon when making a decision to purchase or sell any asset. An offering to invest in an a16z fund will be made only by the private placement memorandum, subscription agreement, and other relevant documentation of any such fund.\u003C\u002Fp\u003E\n\u003Cp\u003ECertain information contained herein has been obtained from third-party sources, including from portfolio companies of funds managed by a16z. While taken from sources believed to be reliable, a16z has not independently verified such information and makes no representations about the current or enduring accuracy of the information or its appropriateness for a given situation. Links may include third-party advertisements; a16z has not reviewed such advertisements and does not endorse any advertising content contained therein.\u003C\u002Fp\u003E\n";ct.analytics_code_header=b;ct.banner=e;ct.banner_copy="Crypto is on the ballot. Go here for more election resources";ct.banner_link={title:b,url:"https:\u002F\u002Fwww.standwithcrypto.org\u002Fvote",target:b};ct.csx_applications_open_date="01\u002F01\u002F2025 12:00 am";ct.csx_applications_close_date="07\u002F02\u002F2025 12:00 am";cv[0]={title:"Jobs",link:"\u002Fjobs\u002Fcompanies\u002F"};cv[1]={title:"Announcements",link:"\u002Fposts\u002Ftags\u002Fannouncements"};cv[2]={title:"Legal",link:"\u002Flegal"};cv[3]={title:"Sitemap",link:"\u002Fsitemap"};cv[4]={title:"a16z.com",link:"https:\u002F\u002Fa16z.com"};cw[0]={title:"Twitter",link:"https:\u002F\u002Ftwitter.com\u002Fa16zcrypto"};cw[1]={title:"GitHub",link:"https:\u002F\u002Fgithub.com\u002Fa16z"};cw[2]={title:"YouTube",link:"https:\u002F\u002Fwww.youtube.com\u002Fchannel\u002FUCTHq3W46BiAYjKUYZq2qm-Q"};cw[3]={title:"Farcaster",link:"https:\u002F\u002Fwarpcast.com\u002Fa16zcrypto"};cw[4]={title:"LinkedIn",link:"https:\u002F\u002Fwww.linkedin.com\u002Fshowcase\u002Fa16zcrypto\u002F?viewAsMember=true"};cw[5]={title:"Instagram",link:"https:\u002F\u002Fwww.instagram.com\u002Fa16zcrypto\u002F"};cx[0]={title:"Apple Music",link:"https:\u002F\u002Fpodcasts.apple.com\u002Fus\u002Fpodcast\u002Fweb3-with-a16z-crypto\u002Fid1622312549"};cx[1]={title:"Spotify",link:"https:\u002F\u002Fopen.spotify.com\u002Fshow\u002F7pMZvsNXEnb0CYcPiDQywE"};cx[2]={title:"Amazon Music",link:"https:\u002F\u002Fmusic.amazon.com\u002Fpodcasts\u002Fc8e9bb85-11da-4498-ac00-9288f493f6db\u002Fweb3-with-a16z-crypto"};cx[3]={title:"Overcast",link:"https:\u002F\u002Fovercast.fm\u002Flogin"};cx[4]={title:"Stitcher",link:"https:\u002F\u002Fwww.stitcher.com\u002Fshow\u002Fweb3-with-a16z"};cx[5]={title:"IHeartRadio",link:"https:\u002F\u002Fwww.iheart.com\u002Fpodcast\u002F1168-web3-with-a16z-96501686\u002F"};cx[6]={title:"Pocket Casts",link:"https:\u002F\u002Fpca.st\u002F4ghx22vk"};eU.title=D;eU.slug=E;eU.featured_posts=d;return {data:[{taxonomiesKeys:["themes","focus-areas","series","departments","locations","stages","industries","tags","formats"],isTaxonomy:bD,parsely:void 0}],fetch:{"data-v-73085de4:0":{fixedHeader:e,debounce:d,searching:e,settings:ct,mainMenu:[{ID:eD,post_author:bj,post_date:aL,post_date_gmt:eE,post_content:b,post_title:eF,post_excerpt:b,post_status:z,comment_status:u,ping_status:u,post_password:b,post_name:"about-2",to_ping:b,pinged:b,post_modified:aL,post_modified_gmt:bZ,post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16zcrypto.approvemyviews.com\u002F?p=4821",menu_order:a,post_type:aG,post_mime_type:b,comment_count:o,filter:f,db_id:eD,menu_item_parent:o,object_id:"92",object:aU,type:aV,type_label:aW,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fabout\u002F",title:eF,target:b,attr_title:b,description:b,classes:[b],xfn:b},{ID:eG,post_author:bj,post_date:aL,post_date_gmt:eE,post_content:b,post_title:eH,post_excerpt:b,post_status:z,comment_status:u,ping_status:u,post_password:b,post_name:"portfolio-2",to_ping:b,pinged:b,post_modified:aL,post_modified_gmt:bZ,post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16zcrypto.approvemyviews.com\u002F?p=4822",menu_order:2,post_type:aG,post_mime_type:b,comment_count:o,filter:f,db_id:eG,menu_item_parent:o,object_id:"94",object:aU,type:aV,type_label:aW,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fportfolio\u002F",title:eH,target:b,attr_title:b,description:b,classes:[b],xfn:b},{ID:eI,post_author:"1",post_date:aL,post_date_gmt:"2023-01-26 15:42:16",post_content:b,post_title:eJ,post_excerpt:b,post_status:z,comment_status:u,ping_status:u,post_password:b,post_name:"content",to_ping:b,pinged:b,post_modified:aL,post_modified_gmt:bZ,post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16z.netlify.app\u002F?p=3770",menu_order:3,post_type:aG,post_mime_type:b,comment_count:o,filter:f,db_id:eI,menu_item_parent:o,object_id:"3770",object:bk,type:bk,type_label:eK,title:eJ,url:"\u002Fposts\u002F",target:b,attr_title:b,description:b,classes:[b],xfn:b},{ID:eL,post_author:bj,post_date:aD,post_date_gmt:"2023-02-23 07:58:30",post_content:b,post_title:aZ,post_excerpt:b,post_status:z,comment_status:u,ping_status:u,post_password:b,post_name:aZ,to_ping:b,pinged:b,post_modified:aD,post_modified_gmt:bl,post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16zcrypto.approvemyviews.com\u002F?p=4823",menu_order:p,post_type:aG,post_mime_type:b,comment_count:o,filter:f,db_id:eL,menu_item_parent:o,object_id:"117",object:aU,type:aV,type_label:aW,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fpolicy\u002F",title:aZ,target:b,attr_title:b,description:b,classes:[b],xfn:b},{ID:eM,post_author:eN,post_date:aD,post_date_gmt:"2023-02-27 23:58:17",post_content:b,post_title:C,post_excerpt:b,post_status:z,comment_status:u,ping_status:u,post_password:b,post_name:C,to_ping:b,pinged:b,post_modified:aD,post_modified_gmt:bl,post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16z.netlify.app\u002F?p=6202",menu_order:eO,post_type:aG,post_mime_type:b,comment_count:o,filter:f,db_id:eM,menu_item_parent:o,object_id:"107",object:aU,type:aV,type_label:aW,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fresearch\u002F",title:C,target:b,attr_title:b,description:b,classes:[b],xfn:b},{ID:eP,post_author:bj,post_date:aD,post_date_gmt:"2023-02-23 07:56:09",post_content:b,post_title:eQ,post_excerpt:b,post_status:z,comment_status:u,ping_status:u,post_password:b,post_name:"4820",to_ping:b,pinged:b,post_modified:aD,post_modified_gmt:bl,post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16zcrypto.approvemyviews.com\u002F?p=4820",menu_order:eR,post_type:aG,post_mime_type:b,comment_count:o,filter:f,db_id:eP,menu_item_parent:o,object_id:"113",object:aU,type:aV,type_label:aW,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Faccelerator\u002F",title:eQ,target:b,attr_title:b,description:b,classes:[b],xfn:b},{ID:eS,post_author:eN,post_date:aD,post_date_gmt:"2024-03-28 21:35:16",post_content:b,post_title:eT,post_excerpt:b,post_status:z,comment_status:u,ping_status:u,post_password:b,post_name:"state-of-crypto",to_ping:b,pinged:b,post_modified:aD,post_modified_gmt:bl,post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fapi.a16zcrypto.com\u002F?p=10280",menu_order:bm,post_type:aG,post_mime_type:b,comment_count:o,filter:f,db_id:eS,menu_item_parent:o,object_id:"10280",object:bk,type:bk,type_label:eK,title:eT,url:"https:\u002F\u002Fa16zcrypto.com\u002Fstateofcryptoindex\u002F",target:b,attr_title:b,description:b,classes:[b],xfn:b}],contentSlideoutOpen:e},"data-v-0d1bf34e:0":{selectedFormats:[],showFilter:e,term:eU,tags:[{title:"AI &amp; crypto",slug:"ai-crypto",featured_posts:d},{title:eV,slug:eV,featured_posts:d},{title:"AMMs",slug:"amms",featured_posts:d},{title:"anatomy of a hack",slug:"anatomy-of-a-hack",featured_posts:d},{title:eW,slug:eW,featured_posts:d},{title:"annual Big Ideas",slug:"annual-big-ideas",featured_posts:d},{title:"arts &amp; culture",slug:"arts-culture",featured_posts:d},{title:"auction design",slug:"auction-design",featured_posts:d},{title:eX,slug:eX,featured_posts:d},{title:"BFT",slug:"bfts-byzantine-fault-tolerance",featured_posts:d},{title:eY,slug:eY,featured_posts:d},{title:"brand &amp; marketing",slug:"brand-marketing",featured_posts:d},{title:"business strategy",slug:"business-strategy-for-web3",featured_posts:d},{title:"choosing infrastructure",slug:"choosing-infrastructure",featured_posts:d},{title:"comment letters &amp; amicus briefs",slug:"comment-letters",featured_posts:d},{title:"community building",slug:"community-management",featured_posts:d},{title:eZ,slug:eZ,featured_posts:d},{title:"compliance &amp; illicit finance",slug:"compliance-illicit-finance",featured_posts:d},{title:e_,slug:e_,featured_posts:d},{title:e$,slug:e$,featured_posts:d},{title:"creator economy",slug:"creator-economy",featured_posts:d},{title:"crypto basics",slug:"crypto-basics-explainers-primers-101",featured_posts:d},{title:"Crypto Startup Accelerator (CSX)",slug:"crypto-startup-accelerator-csx",featured_posts:d},{title:fa,slug:fa,featured_posts:d},{title:"CSX 2020",slug:"csx-2020",featured_posts:d},{title:"CSX 2023",slug:"csx-2023",featured_posts:d},{title:"CSX 2024 (London)",slug:"csx-2024",featured_posts:d},{title:"CSX 2024 (NYC)",slug:"csx-2024-2",featured_posts:d},{title:"CSX 2025 (SF)",slug:"csx-2025-sf",featured_posts:d},{title:fb,slug:fb,featured_posts:d},{title:fc,slug:fc,featured_posts:d},{title:"DAGs",slug:"dags-directed-acylic-graphs",featured_posts:d},{title:fd,slug:fd,featured_posts:d},{title:"DAOs",slug:"daos",featured_posts:d},{title:"data availability",slug:"data-availabililty",featured_posts:d},{title:"data insights",slug:"data-insights",featured_posts:d},{title:fe,slug:fe,featured_posts:d},{title:a$,slug:a$,featured_posts:d},{title:"decentralization how-to",slug:"decentralization-how-to",featured_posts:d},{title:"decentralized media &amp; entertainment",slug:"media-entertainment",featured_posts:d},{title:"DeFi",slug:"defi",featured_posts:d},{title:"DePIN",slug:"depin",featured_posts:d},{title:"DeSci",slug:"desci",featured_posts:d},{title:"design &amp; user experience",slug:"ux-design-user-experience",featured_posts:d},{title:"developer experience &amp; tooling",slug:"developer-experience-tooling",featured_posts:d},{title:"digital assets",slug:"digital-assets",featured_posts:d},{title:"DUNA",slug:"duna",featured_posts:d},{title:ff,slug:ff,featured_posts:d},{title:"Ethereum",slug:"ethereum",featured_posts:d},{title:"FAQ",slug:"faq",featured_posts:d},{title:"FHE (fully homomorphic encryption)",slug:"fhe",featured_posts:d},{title:"field notes",slug:"field-notes",featured_posts:d},{title:F,slug:G,featured_posts:d},{title:"founder stories",slug:"founder-stories",featured_posts:d},{title:"Founders Summit 2022",slug:"founders-summit-2022",featured_posts:d},{title:"Founders Summit 2023",slug:"founders-summit-2023",featured_posts:d},{title:fg,slug:fg,featured_posts:d},{title:fh,slug:fh,featured_posts:d},{title:"glossaries &amp; terminology",slug:"glossaries-terminology",featured_posts:d},{title:"go-to-market",slug:"go-to-market-gtm",featured_posts:d},{title:fi,slug:fi,featured_posts:d},{title:fj,slug:fj,featured_posts:d},{title:"governance best practices",slug:"governance-best-practices",featured_posts:d},{title:"government agencies",slug:"government-agencies",featured_posts:d},{title:"guest posts",slug:"guest-posts",featured_posts:d},eU,{title:fk,slug:fk,featured_posts:d},{title:"hiring &amp; recruiting",slug:"hiring",featured_posts:d},{title:fl,slug:fl,featured_posts:d},{title:"how innovation happens",slug:"how-innovation-happens",featured_posts:d},{title:"identity &amp; reputation",slug:"decentralized-identity-reputation-pseudonymity-anonymity",featured_posts:d},{title:fm,slug:fm,featured_posts:d},{title:"innovation ecosystems",slug:"innovation-ecosystems",featured_posts:d},{title:fn,slug:fn,featured_posts:d},{title:"IP",slug:"ip-intellectual-property",featured_posts:d},{title:"Lasso + Jolt",slug:"lasso-jolt",featured_posts:d},{title:"legal best practices",slug:"legal-best-practices",featured_posts:d},{title:"licensing",slug:"licensing-licenses",featured_posts:d},{title:"light clients",slug:"light-client",featured_posts:d},{title:fo,slug:fo,featured_posts:d},{title:"LVR",slug:"lvr",featured_posts:d},{title:"Machiavelli for DAOs series",slug:"machiavelli-for-daos-series",featured_posts:d},{title:"machine learning",slug:"machine-learning",featured_posts:d},{title:"marketplaces",slug:"marketplaces-platforms",featured_posts:d},{title:"mechanism design",slug:"mechanism-design",featured_posts:d},{title:"mental models &amp; frameworks",slug:"mental-models-frameworks",featured_posts:d},{title:fp,slug:fp,featured_posts:d},{title:"metrics &amp; measures",slug:"metrics-measures",featured_posts:d},{title:"MPC (multi-party computation)",slug:"mpc-multi-party-computation",featured_posts:d},{title:"multi-client diversity",slug:"multi-client-diversity",featured_posts:d},{title:"network effects",slug:"network-effects",featured_posts:d},{title:"newsletters",slug:"newsletter",featured_posts:d},{title:"NFTs",slug:"nfts-non-fungible-tokens-digital-tokens",featured_posts:d},{title:"offline to online",slug:"offline-to-online",featured_posts:d},{title:"op-eds",slug:"op-ed-opinion-arguments",featured_posts:d},{title:aH,slug:aI,featured_posts:d},{title:"partnerships &amp; sales",slug:"partnerships-sales",featured_posts:d},{title:"PCNs",slug:"payment-channel-network-pcns",featured_posts:d},{title:"people practices &amp; HR",slug:"hr-people-practices",featured_posts:d},{title:"pitching investors",slug:"pitch-investors",featured_posts:d},{title:fq,slug:fq,featured_posts:d},{title:b_,slug:b_,featured_posts:d},{title:fr,slug:fr,featured_posts:d},{title:fs,slug:fs,featured_posts:d},{title:"product-market fit",slug:"product-market-fit",featured_posts:d},{title:ft,slug:ft,featured_posts:d},{title:"progressive decentralization",slug:"progressive-decentralization",featured_posts:d},{title:"proof of stake",slug:"proof-of-stake",featured_posts:d},{title:"proof of unique personhood",slug:"proof-of-unique-personhood",featured_posts:d},{title:"proof of work",slug:"proof-of-work",featured_posts:d},{title:"proposer-builder separation",slug:"proposer-builder-separation",featured_posts:d},{title:"Q&amp;As",slug:"qas",featured_posts:d},{title:"quantum computing &amp; post-quantum crypto",slug:"quantum-post-quantum-crypto",featured_posts:d},{title:"regulatory know-how",slug:"regulatory-know-how",featured_posts:d},{title:"regulatory updates",slug:"regulatory-updates-roundups-recaps",featured_posts:d},{title:b$,slug:ca,featured_posts:d},{title:C,slug:C,featured_posts:d},{title:fu,slug:fu,featured_posts:d},{title:fv,slug:fv,featured_posts:d},{title:fw,slug:fw,featured_posts:d},{title:fx,slug:fx,featured_posts:d},{title:"scaling &amp; throughput",slug:"scaling",featured_posts:d},{title:ba,slug:ba,featured_posts:d},{title:"security best practices",slug:"security-best-practices",featured_posts:d},{title:fy,slug:fy,featured_posts:d},{title:"smart contracts",slug:"smart-contracts",featured_posts:d},{title:"SNARKs",slug:"snarks",featured_posts:d},{title:"SoC",slug:"soc",featured_posts:d},{title:"SoC 2024",slug:"soc-2024",featured_posts:d},{title:"social networks",slug:"social-networks",featured_posts:d},{title:fz,slug:fz,featured_posts:d},{title:cb,slug:"solidity",featured_posts:d},{title:fA,slug:fA,featured_posts:d},{title:"State of Crypto 2022",slug:"state-of-crypto-2022",featured_posts:d},{title:"State of Crypto 2023",slug:"state-of-crypto-2023",featured_posts:d},{title:"State of Crypto 2024",slug:"state-of-crypto-2024",featured_posts:d},{title:"tax policy",slug:"tax-policy",featured_posts:d},{title:"TEEs (trusted execution environment)",slug:"tees",featured_posts:d},{title:"The Merge series",slug:"the-merge-series",featured_posts:d},{title:"token design",slug:"token-design",featured_posts:d},{title:"token launch playbook",slug:"token-launch-playbook",featured_posts:d},{title:fB,slug:fB,featured_posts:d},{title:"UK",slug:"uk",featured_posts:d},{title:"VDFs",slug:"vdfs-verifiable-delay-functions",featured_posts:d},{title:fC,slug:fC,featured_posts:d},{title:"Voices Onchain",slug:"voices-onchain",featured_posts:d},{title:fD,slug:fD,featured_posts:d},{title:"VR",slug:"vr",featured_posts:d},{title:fE,slug:fE,featured_posts:d},{title:"web2 to web3",slug:"web2-to-web3",featured_posts:d},{title:"what we're reading",slug:"what-were-reading",featured_posts:d},{title:cD,slug:cE,featured_posts:[2976]}],formats:[{title:v,slug:q,featured_posts:d},{title:fF,slug:fF,featured_posts:d},{title:"papers",slug:"papers-journals-whitepapers",featured_posts:d},{title:"podcasts",slug:b_,featured_posts:d},{title:fG,slug:fG,featured_posts:d}],allPosts:[{ID:13981,post_author:bn,post_date:"2025-01-30 13:00:57",post_date_gmt:"2025-01-30 21:00:57",post_content:b,post_title:cc,post_excerpt:b,post_status:z,comment_status:aE,ping_status:aE,post_password:b,post_name:"formal-verification-of-pectra-system-contracts-with-halmos",to_ping:b,pinged:b,post_modified:"2025-01-30 14:30:51",post_modified_gmt:"2025-01-30 22:30:51",post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fapi.a16zcrypto.com\u002F?p=13981",menu_order:c,post_type:bo,post_mime_type:b,comment_count:o,filter:f,taxonomies:[{term_id:aM,name:H,slug:cd,term_group:c,term_taxonomy_id:aM,taxonomy:aX,description:ce,parent:c,count:bm,filter:f},{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},{term_id:B,name:aO,slug:aP,term_group:c,term_taxonomy_id:B,taxonomy:A,description:b,parent:c,count:aQ,filter:f},{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:y,name:aH,slug:aI,term_group:c,term_taxonomy_id:y,taxonomy:m,description:b,parent:c,count:aN,filter:f}],acf:{format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},custom_title:b,redirect_author_links_to_the_post:e,post_redirector:e,content:[{acf_fc_layout:aF,paragraph:"\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EEthereum’s upcoming \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Feips.ethereum.org\u002FEIPS\u002Feip-7600\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EPectra\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E hardfork introduces several enhancements to user experience and validator operations across 11 EIPs. Three of these introduce onchain system contracts that use assembly language to optimize gas efficiency. While effective, the use of assembly raises security concerns due to its low-level nature and the lack of compiler-enforced safety checks. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EOne approach to navigating these risks is by using \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fposts\u002Ftags\u002Fformal-verification\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eformal verification\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E to eliminate potential assembly-level security vulnerabilities. To address this, we’ve used \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehalmos\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, our formal verification tool, to ensure the correctness of Pectra system contracts, solidifying the security of the Pectra upgrade.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe resulting \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdaejunpark\u002Fsys-asm-halmos\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Everification artifacts\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E may also serve as concrete examples for other smart contracts that rely on assembly code. Although formal verification is often perceived as an abstract and complex concept, practical examples like these can showcase its utility in a wider range of situations.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn this post, we begin with a brief introduction to Pectra system contracts and the challenges of assembly implementation. We then break down formal verification processes into several steps, and show how we use halmos for these tasks.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\u003Cspan style=\"font-weight: 400;\"\u003EPectra systems contracts and the challenges of assembly implementations\u003C\u002Fspan\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAs noted, the Pectra hardfork, scheduled to ship early this year, includes 11 EIPs, three of which introduce system contracts that execute onchain logic:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Ca href=\"https:\u002F\u002Feips.ethereum.org\u002FEIPS\u002Feip-2935\"\u003E\u003Cb\u003EEIP-2935\u003C\u002Fb\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E proposes storing the last 8191 block hashes in a system contract to support stateless execution. This contract uses a ring buffer for efficient block hash storage.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Ca href=\"https:\u002F\u002Feips.ethereum.org\u002FEIPS\u002Feip-7002\"\u003E\u003Cb\u003EEIP-7002\u003C\u002Fb\u003E\u003C\u002Fa\u003E \u003Cspan style=\"font-weight: 400;\"\u003Eintroduces a mechanism allowing validators to initiate exits and withdrawals directly via their execution layer withdrawal credentials, with withdrawal requests stored in a dedicated system contract. A queue is used here to manage withdrawal requests.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Ca href=\"https:\u002F\u002Feips.ethereum.org\u002FEIPS\u002Feip-7251\"\u003E\u003Cb\u003EEIP-7251\u003C\u002Fb\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E proposes increasing the maximum effective balance for validators, allowing larger validators to consolidate operations. These consolidation requests are managed by a separate system contract using a queue.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EUnlike typical smart contracts written in Solidity, these system contracts are written entirely in assembly for the sake of gas efficiency. Writing smart contracts in assembly language is not uncommon — \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FProjectOpenSea\u002Fseaport\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESeaport\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E and \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FVectorized\u002Fsolady\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESolady\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E are well-known examples — especially in scenarios where the Solidity compiler generates suboptimal code. Notable scenarios for suboptimal compilation include manipulation of byte arrays for calldata preparation, Keccak hash inputs, and other opcodes that read or write dynamic-sized bytes from\u002Fto memory.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhile gas-efficient, assembly programming is a challenging practice, because it can easily introduce flaws and security vulnerabilities. When writing assembly, security checks handled by the compiler (e.g., calldata validation, memory sanitization, and implicit type casting) should be implemented manually. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EMissing checks may result in invalid inputs or dirty memory being exploited, potentially leading to security vulnerabilities. Manually implementing these checks, however, requires advanced knowledge and is prone to human error. This overhead, combined with added complexities from low-level programming, make it extremely challenging and labor-intensive to produce secure assembly code.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification offers a systematic solution to address these challenges by providing mathematical guarantees of correctness and security.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\u003Cspan style=\"font-weight: 400;\"\u003EA blueprint for formal verification\u003C\u002Fspan\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ELet’s briefly introduce a basic framework for formal verification. While other frameworks exist and details may vary depending on target systems and contexts, this framework provides a useful mental model applicable to the Pectra system contracts. A full explanation of formal verification is beyond the scope of this post. For more information on formal verification of smart contracts, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fethereum.org\u002Fen\u002Fdevelopers\u002Fdocs\u002Fsmart-contracts\u002Fformal-verification\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ethis guide\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is a good starting point.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EA comprehensive approach to end-to-end formal verification typically involves the following steps, grouped into two phases:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003EPhase 1: Model verification\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStep 1. Formalize specifications: Translate the specification, often presented in natural language (e.g., EIPs), into a formal specification language.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStep 2. Define properties: Identify the key properties that the specification must satisfy (e.g., ensuring the ring buffer in EIP-2935 always holds valid block hashes).\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStep 3. Prove properties: Verify that the formal specification defined in Step 1 satisfies the properties identified in Step 2.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003EPhase 2: Refinement proofs\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStep 4. Model implementation: Translate the implementation code into a mathematical model.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStep 5. Prove refinement: Show that the formal model of implementation (from Step 4) faithfully adheres to the formal specification (from Step 1).\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EModel verification and refinement proofs address different aspects of the verification process. Model verification ensures that the specifications are sound, while refinement proofs confirm that the low-level implementation aligns with the specifications. Together, these ensure that the implementation meets the key properties.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESeparating concerns into these two phases provides clarity and modularity in the verification process. It also enables flexibility in execution, allowing different tools and methods to be applied to each phase, parallelizing tasks, or prioritizing them based on time and resource constraints.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn the context of Pectra contracts, model verification amounts to reasoning about their EIP specification document, while refinement proofs ensure that the implementation code matches the EIP document.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\u003Cspan style=\"font-weight: 400;\"\u003EChoosing a tool\u003C\u002Fspan\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EDevelopers can choose from a variety of tools, possibly different tools, for performing model verification and refinement proofs.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EModel verification can benefit most from tools with versatility and expressiveness. Popular options include interactive theorem provers (e.g., \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Flean-lang.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ELean\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fcoq.inria.fr\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ECoq\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fisabelle.in.tum.de\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIsabelle\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fwww.cs.utexas.edu\u002F~moore\u002Facl2\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EACL2\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E), model checkers (e.g., \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Flamport.azurewebsites.net\u002Ftla\u002Ftla.html\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETLA+\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Falloytools.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAlloy\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fquint-lang.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EQuint\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E), and deductive verifiers (e.g., \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fdafny.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EDafny\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fwww.why3.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhy3\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E). These tools enable rigorous reasoning about the properties. For simpler specifications, manual pen-and-paper proofs could also be effective, though they increase the trust base and require meticulous review. Side note: integrating model verification with security audits can be highly beneficial, as auditors may identify additional security properties or potential vulnerabilities within the specification.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ERefinement proofs can benefit from automated verification tools specific to their implementation language. Such automated tools (e.g., \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehalmos\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fhevm.dev\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehevm\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fdocs.runtimeverification.com\u002Fkontrol\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EKontrol\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fdocs.certora.com\u002Fen\u002Flatest\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ECertora\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E for Ethereum smart contracts) can internally handle the modeling of implementation, reducing the risk of human error and the trust base associated with manual translation. Moreover, since implementation code often undergoes frequent changes due to optimizations or refactoring, automated verification can be particularly valuable for performing continuous verification. These tools streamline the process, ensuring that the implementation remains aligned with the specification without requiring exhaustive manual scrutiny for every code update.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWith the formal verification framework in mind, we can now discuss how it can be applied to Pectra system contracts. Next, we will detail the use of halmos for refinement proofs. Note that our halmos-based formal verification specifically focuses on refinement proofs, excluding model verification. Model verification can be performed separately using the methods and tools discussed earlier, which we leave for future work.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\u003Cspan style=\"font-weight: 400;\"\u003ERefinement proofs of Pectra system contracts\u003C\u002Fspan\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos, a formal verification tool for EVM bytecode, is well-suited for performing refinement proofs. It automates key parts of the process, particularly Step 4 (modeling the implementation), and directly verifies refinement between the specification and the implementation bytecode in Step 5.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETo use halmos, refinement conditions are expressed as regular Solidity tests, specifically using assertions to ensure the implementation’s behavior aligns with their specification. These assertions focus solely on verifying that the implementation adheres to the specification, distinct from validating the properties of the specification itself — a task handled during model verification.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe applied halmos to Pectra system contracts by manually translating the EIP specifications into Solidity test assertions. Then we used these tests to verify the compiled bytecode of the assembly implementation. This process ensures that the system contracts behave as specified, across all possible inputs and contract states. While Halmos provides a “bounded” formal guarantee — limited by execution constraints like loop iterations or byte array sizes — it is a robust and practical approach for ensuring correctness.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe trust base for this process includes the manual translation of EIP specifications to Solidity tests — reviewed independently by our security engineer — and the halmos tool itself. \u003C\u002Fspan\u003EImportantly, the assembly compiler is excluded from the trust base, as the verification directly targets the compiled bytecode.\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003EEfficiency and continuous verification\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe completed the initial verification process within a few days and later improved over a couple of weeks to enhance test structure, assertions, and documentation. Halmos proved effective for both the initial verification and the continuous verification process, which involved re-verifying the implementation after code updates. Each re-verification cycle required only a few hours, making it practical to maintain correctness even during iterative development.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe value of continuous verification was underscored when halmos tests detected an off-by-one error introduced during a refactoring process. Refactoring, by definition, should preserve the original behavior of the code. However, the tests failed, signaling a discrepancy. A deeper investigation uncovered a subtle mistake, highlighting continuous verification as a powerful safety net for catching errors early in iterative changes and reinforcing code reliability.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFor full details and access to the artifacts from our formal verification of Pectra system contracts, see \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdaejunpark\u002Fsys-asm-halmos\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehere\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003E***\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe see formal verification as a useful approach for a wide audience of developers and security researchers — not just a select set of experts. If you’re working on gas-optimized contracts or curious about formal verification, now’s the time to dive in. As assembly optimization remains a critical practice for achieving gas efficiency, integrating formal verification tools like halmos into the development process provides a practical way to balance performance with security. This approach not only enhances confidence in low-level implementations but also demonstrates that optimization and security can coexist without compromise.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003E***\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe thank \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fx.com\u002Flightclients\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E@lightclients\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ffjl\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFelix Lange\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fx.com\u002Ffredriksvantes\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFredrik Svantes\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, and \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fx.com\u002Fignaciohagopian\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIgnacio Hagopian\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E for sharing their insights on the design decisions of system contracts; \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fteam\u002Fmatt-gleason\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EMatt Gleason\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fx.com\u002Fleekt216\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETaek Lee\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, and Jinwoo Lee for their valuable discussions and contributions during the verification process; \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fteam\u002Feddy-lazzarin\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EEddy Lazzarin\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fx.com\u002F_sophiagold_\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESophia Gold\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, and \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fx.com\u002FTimBeiko\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETim Beiko\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E for facilitating collaboration; and \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fteam\u002Fstephanie-zinn\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStephanie Zinn\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E and \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fx.com\u002F0xkarmacoma\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ekarma\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E for their thoughtful feedback and review of this post.\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E***\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cem\u003EThe views expressed here are those of the individual AH Capital Management, L.L.C. (“a16z”) personnel quoted and are not the views of a16z or its affiliates. Certain information contained in here has been obtained from third-party sources, including from portfolio companies of funds managed by a16z. While taken from sources believed to be reliable, a16z has not independently verified such information and makes no representations about the current or enduring accuracy of the information or its appropriateness for a given situation. In addition, this content may include third-party advertisements; a16z has not reviewed such advertisements and does not endorse any advertising content contained therein.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Cdiv dir=\"ltr\"\u003E\n\u003Cdiv\u003E\u003Cem\u003EThis content is provided for informational purposes only, and should not be relied upon as security, legal, business, investment, or tax advice, nor as an endorsement of any such practices, products or services. There can be no guarantees or assurances that the views expressed here will be applicable for any particular facts or circumstances, and they should accordingly not be relied upon in any manner\u003C\u002Fem\u003E\u003Cem\u003E. References to any securities or digital assets are for illustrative purposes only, and do not constitute an investment recommendation or offer to provide investment advisory services. Furthermore, this content is not directed at nor intended for use by any investors or prospective investors, and may not under any circumstances be relied upon when making a decision to invest in any fund managed by a16z. (An offering to invest in an a16z fund will be made only by the private placement memorandum, subscription agreement, and other relevant documentation of any such fund and should be read in their entirety.) Any investments or portfolio companies mentioned, referred to, or described are not representative of all investments in vehicles managed by a16z, and there can be no assurance that the investments will be profitable or that other investments made in the future will have similar characteristics or results. A list of investments made by funds managed by Andreessen Horowitz (excluding investments for which the issuer has not provided permission for a16z to disclose publicly as well as unannounced investments in publicly traded digital assets) is available at https:\u002F\u002Fa16z.com\u002Finvestments\u002F.\u003C\u002Fem\u003E\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Cp\u003E\u003Cem\u003ECharts and graphs provided within are for informational purposes solely and should not be relied upon when making any investment decision. Past performance is not indicative of future results. The content speaks only as of the date indicated. Any projections, estimates, forecasts, targets, prospects, and\u002For opinions expressed in these materials are subject to change without notice and may differ or be contrary to opinions expressed by others. Please see https:\u002F\u002Fa16z.com\u002Fdisclosures for additional important information.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n"}],related_posts:bp,disclosure_relation:e},tags:[{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:y,name:aH,slug:aI,term_group:c,term_taxonomy_id:y,taxonomy:m,description:b,parent:c,count:aN,filter:f}],post_thumbnail:"\u003Cimg width=\"1024\" height=\"576\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-1024x576.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" srcset=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-1024x576.jpg 1024w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-300x169.jpg 300w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-768x432.jpg 768w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-1536x864.jpg 1536w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080.jpg 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" \u002F\u003E",post_thumbnail_small:"\u003Cimg width=\"150\" height=\"150\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-150x150.jpg\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" \u002F\u003E",post_images:[{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-150x150.jpg",width:L},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-300x169.jpg",width:aK},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080-1024x576.jpg",width:aT}],authors:[{ID:cf,display_name:cg,first_name:ch,last_name:ci,user_login:H,user_email:b,linked_account:b,website:cj,description:ck,user_nicename:H,type:aY,nickname:b}],meta_desc:bq,seo:{title_tag:"Formal verification of Pectra system contracts with Halmos - a16z crypto",meta_description:bq,canonical:fH,robots:{index:br,follow:bs,"max-snippet":bt,"max-image-preview":bu,"max-video-preview":bv},open_graph_locale:bw,open_graph_type:q,open_graph_title:cc,open_graph_description:bq,open_graph_url:fH,open_graph_images:{"https://api.a16zcrypto.com/wp-content/uploads/2025/01/Halmos_Update1.30.25_1920x1080.jpg":{width:cl,height:cm,filesize:1126963,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080.jpg",path:"\u002Fnas\u002Fcontent\u002Flive\u002Fa16zcryptocms\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_1920x1080.jpg",size:bx,id:"13986",alt:b,pixels:cn,type:co}},open_graph_site_name:by,estimated_reading_time_minutes:9,twitter_card:bz,twitter_title:cc,twitter_description:bq,twitter_image:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2025\u002F01\u002FHalmos_Update1.30.25_X-FB.jpg",open_graph_article_published_time:"2025-01-30T21:00:57+00:00"},format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},template:b,disclosure:e},{ID:10017,post_author:bn,post_date:"2024-03-14 12:06:21",post_date_gmt:"2024-03-14 19:06:21",post_content:b,post_title:"Pro tip: Implementing stateful invariant testing with Halmos",post_excerpt:b,post_status:z,comment_status:aE,ping_status:aE,post_password:b,post_name:"implementing-stateful-invariant-testing-with-halmos",to_ping:b,pinged:b,post_modified:"2024-05-19 18:41:38",post_modified_gmt:"2024-05-20 01:41:38",post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fapi.a16zcrypto.com\u002F?p=10017",menu_order:c,post_type:bo,post_mime_type:b,comment_count:o,filter:f,taxonomies:[{term_id:fI,name:cp,slug:"cap-antonio-viggiano",term_group:c,term_taxonomy_id:fI,taxonomy:aX,description:"Antonio Viggiano Antonio Viggiano antonio-viggiano 10031 ",parent:c,count:a,filter:f},{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},{term_id:B,name:aO,slug:aP,term_group:c,term_taxonomy_id:B,taxonomy:A,description:b,parent:c,count:aQ,filter:f},{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:a_,name:C,slug:C,term_group:c,term_taxonomy_id:a_,taxonomy:A,description:b,parent:c,count:cA,filter:f}],acf:{format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},custom_title:b,redirect_author_links_to_the_post:e,post_redirector:e,content:[{acf_fc_layout:aF,paragraph:"\u003Cp\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400;\"\u003EEditor’s note: A frequently-asked question we get about \u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fposts\u002Farticle\u002Fsymbolic-testing-with-halmos-leveraging-existing-tests-for-formal-verification\u002F\"\u003EHalmos\u003C\u002Fa\u003E, a16z crypto&#8217;s open source formal verification tool, is: &#8220;Can you use it for stateful invariant\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E testing?&#8221; It&#8217;s not supported out of the box;\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E but in this post, independent security\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E researcher Antonio Viggiano shares\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E a new approach to stateful invariant testing, discovered while working with our engineering team on Halmos&#8217;s performance. See his blog, \u003Ca href=\"https:\u002F\u002Ffuzzy.fyi\u002Fblog\"\u003EFuzzy\u003C\u002Fa\u003E, for more on fuzz testing, invariant testing, symbolic testing, and formal verification.\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fposts\u002F?tag=formal-verification\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E and invariant testing are two different approaches to evaluating whether a program works as expected. Unlike formal verification, invariant testing evaluates the program’s behavior for \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Esome\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E inputs, while formal verification can check it for \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eall\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E possible inputs. Formal verification may seem like the more efficient, more comprehensive solution. But in reality, these processes are complimentary: They have different strengths and provide the greatest assurance when used together. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003EHalmos\u003C\u002Fa\u003E, an open source formal verification tool developed by a16z crypto, can help developers bridge the gap between invariant testing and formal verification by allowing them to reuse the same properties written for invariant testing for formal specifications through symbolic testing. Similarly, we can use Halmos for invariant testing to prove that protocol invariants hold up to some arbitrary number of transactions. Though invariant testing is not the intended use case, developers looking for creative ways to expand their quality assurance toolset can also use Halmos for stateless testing and, now, stateful testing with a few small adjustments.  \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn this post, we dive into implementing stateful invariant testing using Halmos, a symbolic testing tool for EVM smart contracts. First, we present a brief overview of symbolic testing and stateful invariant testing; then discuss how Halmos compares to traditional fuzz testing tools. Finally, we look at a practical case study on a simplified version of the Multi-Collateral DAI system, and how Halmos can be used to enhance the reliability and security of smart contracts.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EA brief overview of symbolic testing using Halmos\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESymbolic testing involves executing tests with symbolic values, significantly reducing the need for extensive specifications. Unlike conventional testing, which confirms program functionality for specific inputs, symbolic testing evaluates a program against all conceivable inputs. This level of rigor and comprehensiveness is uniquely useful in a blockchain setting, where a program’s correctness is critically important. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is a symbolic testing tool for EVM smart contracts, developed by a16z crypto. It simplifies the process by using existing tests as the basis for formal specifications, instead of requiring new specifications or languages.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg decoding=\"async\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FtestTransferOwnershipUpdate.png\" \u002F\u003E\u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fposts\u002Farticle\u002Fsymbolic-testing-with-halmos-leveraging-existing-tests-for-formal-verification\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cspan style=\"font-size: 10pt;\"\u003ESource: \u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400; font-size: 10pt;\"\u003ESymbolic testing with Halmos: Leveraging existing tests for formal verification\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400; font-size: 10pt;\"\u003E \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe field of symbolic testing is closely related to fuzz testing with the difference that, instead of trying random inputs in order to break system properties or invariants, Halmos will check an invariant against the whole range of valid inputs. Because of this, Halmos can provide a higher assurance than a fuzzer. While \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fbook.getfoundry.sh\u002Fforge\u002Ffuzz-testing\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFoundry\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcrytic\u002Fechidna\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EEchidna\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, or \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcrytic\u002Fmedusa\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EMedusa\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, can verify the presence of a bug relatively fast, they cannot, in general, assert their absence. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhen tests are run through Halmos, it either confirms the tests are valid for all inputs or provides examples where they fail. This approach makes use of existing unit tests or fuzz tests for formal verification, soo developers can focus on improving and extending the testing suite, rather than creating new specifications.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EWhat about stateful invariant testing?\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fallthingsfuzzy.substack.com\u002Fp\u002Flearnings-from-6-weeks-of-fuzzing\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EMy previous research\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E has shown that complex protocols may require many different function calls with input in a specific range before invariants are broken — sometimes as many as 10 different transactions. This shows how stateful invariant tests can play a crucial role in the quality assurance strategies that a project should adopt alongside stateless invariant tests.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStateful testing consists of maintaining the system&#8217;s internal state across multiple test cases of function executions. This methodology can more closely resemble real-world scenarios, as it takes into account the impact of previous transactions on new ones and explores the dependencies of different paths to break system invariants. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EMost fuzzers support stateful fuzzing out of the box, which involves evaluating a collection of invariant expressions using random sequences of specified function calls from predetermined contracts. These invariants are checked after every function call execution and are an effective method for revealing logic errors in intricate protocol states and atypical scenarios.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos natively supports stateless invariant testing, which operates by resetting the system state between each test case, but it does not support stateful testing by default. The tool was conceived to be plugged into existing Foundry property-based tests, which generally don&#8217;t retain state between multiple executions. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhile it’s not the intended use case, there is a way to make stateful testing work with Halmos.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-10089\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FEchidna-output-of-a-stateful-fuzzing-campaign-on-a-protocol-1.png\" alt=\"Echidna-output-of-a-stateful-fuzzing-campaign-on-a-protocol-1.png\" width=\"1146\" height=\"349\" srcset=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FEchidna-output-of-a-stateful-fuzzing-campaign-on-a-protocol-1.png 1146w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FEchidna-output-of-a-stateful-fuzzing-campaign-on-a-protocol-1-300x91.png 300w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FEchidna-output-of-a-stateful-fuzzing-campaign-on-a-protocol-1-1024x312.png 1024w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FEchidna-output-of-a-stateful-fuzzing-campaign-on-a-protocol-1-768x234.png 768w\" sizes=\"auto, (max-width: 1146px) 100vw, 1146px\" \u002F\u003E\u003Cspan style=\"font-weight: 400; font-size: 10pt;\"\u003ESource: Echidna output of a stateful fuzzing campaign on a protocol \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EImplementing stateful invariant testing with Halmos\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn order to circumvent the current limitations (or, rather, design decisions) of Halmos, we choose to use the strengths of symbolic testing and \u003C\u002Fspan\u003E\u003Cb\u003Eexecute function calls symbolically\u003C\u002Fb\u003E\u003Cspan style=\"font-weight: 400;\"\u003E. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThis means that, instead of \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fbook.getfoundry.sh\u002Fforge\u002Finvariant-testing#invariant-targets\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eimplementing a \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Etarget contract\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E to fuzz against (which is usually what we would do with Echidna), we implement a \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Etarget function \u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ethat receives an \u003C\u002Fspan\u003E\u003Cb\u003Earray of function selectors \u003C\u002Fb\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ethat can execute any arbitrary function call. Then, we simply loop over this array, filter for the selectors we&#8217;re interested in, create symbolic inputs \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos-cheatcodes\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos cheat codes\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, and \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Faviggiano\u002Fproperty-based-testing-benchmark\u002Fblob\u002Fmain\u002Fprojects\u002Fdai-certora\u002Ftest\u002FTargetFunctions.sol\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ebind them to valid ranges\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E in order to optimize for the SMT-solving phase.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n"},{acf_fc_layout:bA,code_block:"    function check_minivat_n_full_symbolic(bytes4[] memory selectors) public {\r\n        for (uint256 i = 0; i \u003C selectors.length; ++i) {\r\n            assumeValidSelector(selectors[i]);\r\n            assumeSuccessfulCall(address(minivat), calldataFor(selectors[i]));\r\n        }\r\n\r\n        assertEq(\r\n            minivat.debt(),\r\n            minivat.Art() * minivat.rate(),\r\n            \"The Fundamental Equation of DAI\"\r\n        );\r\n    }\r\n\r\n    function calldataFor(bytes4 selector) internal view returns (bytes memory) {\r\n        if (selector == minivat.init.selector) {\r\n            return abi.encodeWithSelector(selector);\r\n        } else if (selector == minivat.move.selector) {\r\n            return\r\n                abi.encodeWithSelector(\r\n                    selector,\r\n                    svm.createAddress(\"dst\"),\r\n                    svm.createInt256(\"wad\")\r\n                );\r\n        } else if (selector == minivat.frob.selector) {\r\n            return abi.encodeWithSelector(selector, svm.createInt256(\"dart\"));\r\n        } else if (selector == minivat.fold.selector) {\r\n            return abi.encodeWithSelector(selector, svm.createInt256(\"delta\"));\r\n        } else {\r\n            revert();\r\n        }\r\n    }",code_type:cb},{acf_fc_layout:aF,paragraph:"\u003Cp\u003E\u003Cspan style=\"font-size: 10pt;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESource: \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Faviggiano\u002Fproperty-based-testing-benchmark\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eaviggiano\u002Fproperty-based-testing-benchmark\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E \u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAs a result of this setup, Halmos will now execute this test with a series of N symbolic function selectors and execute these functions from our target contract, with the size of the sequence equal to the number of loop unrolling limits: \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n"},{acf_fc_layout:bA,code_block:"$ halmos --function check_minivat_n_full_symbolic --contract HalmosT \r\n\r\n[⠢] Compiling... \r\n[⠊] Compiling 1 files with 0.8.21 \r\n[⠒] Solc 0.8.21 finished in 743.63ms \r\nCompiler run successful! \r\n\r\nRunning 1 tests for test\u002FHalmosTester.sol:HalmosTester Counterexample: \r\nhalmos_dart_int256_01 = 0x00000000000000000000000000000000000000\r\n  p_selectors[0]_bytes4 = 0x380dc3ca000000000000000000000000000000\r\n  p_selectors[1]_bytes4 = 0xe1c7392a000000000000000000000000000000\r\nSymbolic test result: 0 passed; 1 failed; time: 12.62s",code_type:fJ},{acf_fc_layout:aF,paragraph:"\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn order to evaluate symbolic execution tools for EVM bytecode, we implement a simplified version of the Multi-Collateral DAI system created by \u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fpalinatolmach\"\u003EPalina Tolmach\u003C\u002Fa\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E against the \u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fbaolean\u002Fsymexec-bench\u002Fblob\u002Fmain\u002FVat\u002FMiniVat.sol\"\u003EMiniVat\u003C\u002Fa\u003E\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E smart contract. In this example, Halmos was able to find a counterexample with concrete values for the \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fhackmd.io\u002F@SaferMaker\u002FDAICertoraSurprise\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ebroken invariant\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E in 12 seconds, although the timeout can grow rapidly for a higher number of loop unrolling limit. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThis experiment can be thought of as running Echidna with a sequence length of N, which yields a similar output:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n"},{acf_fc_layout:bA,code_block:"$ echidna . --contract CryticTester --config config.yaml --seq-len 2 \r\n\r\n[2023-11-15 13:48:36.74] Compiling .... Done! (5.483472s) Analyzing contract: property-based-testing-benchmark\u002Fprojects\u002Fdai-ce\r\n[2023-11-15 13:48:42.96] Running slither on .... Done!\r\n(9.04136s) invariant: failed!\r\n Call sequence: \r\n frob(1) \r\n init() \r\n\r\nEvent sequence: \r\nPanic(1): Using assert\r\nLog(«The Fundamental Equation of DAI») from: 0xa329c0648769a73afac7f \r\n\r\nUnique instructions: 1251 \r\nUnique codehashes: 2 \r\nCorpus size: 4 \r\nSeed: 7112067775457772404 ",code_type:fJ},{acf_fc_layout:aF,paragraph:"\u003Cp\u003ERunning Halmos with an array of function selectors can be useful in checking for invariants that depend on a sequence of multiple function calls. This approach also demonstrates the flexibility of Halmos as a symbolic execution tool.\u003C\u002Fp\u003E\n\u003Cp\u003EBy applying this strategy, we hope further research will help determine the applicability of Halmos in assessing protocol-level invariants of complex projects. A wider, more flexible range of quality assurance options, which includes invariant testing, fuzzing, and formal verification, can help ensure critical protocols behave as intended.\u003C\u002Fp\u003E\n"}],related_posts:bp,disclosure_relation:e},tags:[{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f}],post_thumbnail:"\u003Cimg width=\"1024\" height=\"576\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-1024x576.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" srcset=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-1024x576.jpg 1024w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-300x169.jpg 300w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-768x432.jpg 768w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-1536x864.jpg 1536w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080.jpg 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" \u002F\u003E",post_thumbnail_small:"\u003Cimg width=\"150\" height=\"150\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-150x150.jpg\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" \u002F\u003E",post_images:[{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-150x150.jpg",width:L},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-300x169.jpg",width:aK},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080-1024x576.jpg",width:aT}],authors:[{ID:"10031",display_name:"Antonio Viggiano",first_name:"Antonio",last_name:"Viggiano",user_login:cp,user_email:b,linked_account:b,website:b,description:b,user_nicename:cp,type:aY,nickname:b}],meta_desc:bB,seo:{title_tag:"Pro tip: Implementing stateful invariant testing with Halmos - a16z crypto",meta_description:bB,canonical:fK,robots:{index:br,follow:bs,"max-snippet":bt,"max-image-preview":bu,"max-video-preview":bv},open_graph_locale:bw,open_graph_type:q,open_graph_title:fL,open_graph_description:bB,open_graph_url:fK,open_graph_images:{"https://api.a16zcrypto.com/wp-content/uploads/2024/02/ProTip_Halmos_1920x1080.jpg":{width:cl,height:cm,filesize:686775,url:fM,path:"\u002Fnas\u002Fcontent\u002Flive\u002Fa16zcryptocms\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080.jpg",size:bx,id:"10029",alt:b,pixels:cn,type:co}},open_graph_site_name:by,estimated_reading_time_minutes:eR,twitter_card:bz,twitter_title:fL,twitter_description:bB,twitter_image:fM,open_graph_article_published_time:"2024-03-14T19:06:21+00:00"},format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},template:b,disclosure:e},{ID:7959,post_author:bn,post_date:"2023-07-25 08:55:47",post_date_gmt:"2023-07-25 15:55:47",post_content:b,post_title:cq,post_excerpt:b,post_status:z,comment_status:aE,ping_status:aE,post_password:b,post_name:"release-notes-halmos-v0-1-0",to_ping:b,pinged:b,post_modified:"2024-07-19 09:21:20",post_modified_gmt:"2024-07-19 16:21:20",post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16zcrypto.com\u002F?p=7959",menu_order:c,post_type:bo,post_mime_type:b,comment_count:o,filter:f,taxonomies:[{term_id:fN,name:cr,slug:"cap-daniel-reynaud",term_group:c,term_taxonomy_id:fN,taxonomy:aX,description:"karma (Daniel Reynaud) Daniel Reynaud daniel-reynaud 7022 ",parent:c,count:eO,filter:f},{term_id:aM,name:H,slug:cd,term_group:c,term_taxonomy_id:aM,taxonomy:aX,description:ce,parent:c,count:bm,filter:f},{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},{term_id:B,name:aO,slug:aP,term_group:c,term_taxonomy_id:B,taxonomy:A,description:b,parent:c,count:aQ,filter:f},{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:y,name:aH,slug:aI,term_group:c,term_taxonomy_id:y,taxonomy:m,description:b,parent:c,count:aN,filter:f},{term_id:bC,name:b$,slug:ca,term_group:c,term_taxonomy_id:bC,taxonomy:m,description:b,parent:c,count:a,filter:f}],acf:{format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},custom_title:b,redirect_author_links_to_the_post:e,post_redirector:e,content:[{acf_fc_layout:aF,paragraph:"\u003Cp\u003E\u003Ci data-stringify-type=\"italic\"\u003EEditor&#8217;s note: \u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fposts\u002Farticle\u002Fsymbolic-testing-with-halmos-leveraging-existing-tests-for-formal-verification\u002F\"\u003EHalmos\u003C\u002Fa\u003E\u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003E \u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003Eis an open source formal verification tool\u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003E \u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003Edeveloped by the team at a16z crypto. We&#8217;ll regularly share the latest improvements and updates in our \u003Ca href=\"https:\u002F\u002Fa16zcrypto.com\u002Fposts\u002Ftags\u002Frelease-notes\"\u003Erelease notes\u003C\u002Fa\u003E\u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003E, as we \u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003Eadd features and improve the tool. \u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003EVisit the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003EGitHub repo\u003C\u002Fa\u003E\u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003E \u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003Eto try Halmos or contribute to the project\u003C\u002Fi\u003E\u003Ci data-stringify-type=\"italic\"\u003E.\u003C\u002Fi\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E v0.1.0 is out, and it’s a big release focused on performance and developer experience.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\u003Cb\u003EPerformance\u003C\u002Fb\u003E\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESignificant performance improvements will benefit both simple tests and large test suites with complex tests. This will make it easier to get started, iterate, and write more ambitious tests.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ctable style=\"border-collapse: collapse; width: 200%; height: 72px;\"\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"width: 52%; padding: 10px 13px;\"\u003E\u003Cb\u003ETool\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: 8%; padding: 10px 13px;\"\u003E\u003Cb\u003E1tx\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: 8%; padding: 10px 13px;\"\u003E\u003Cb\u003EsU+1tx\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: 8%; padding: 10px 13px;\"\u003E\u003Cb\u003E2tx\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: 8%; padding: 10px 13px;\"\u003E\u003Cb\u003EFoo\u002FFooBytes\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: 8%; padding: 10px 13px;\"\u003E\u003Cb\u003EMiniVat\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: 8%; padding: 10px 13px;\"\u003E\u003Cb\u003EERC721A\u003C\u002Fb\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehalmos v0.0.8\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E5.0s\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E4.9s\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E5.0s\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E5.2s\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E30.6s\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E24m15s\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehalmos v0.1.0\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400; font-size: 8pt;\"\u003E1.2s\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400; font-size: 8pt;\"\u003E1.4s\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400; font-size: 8pt;\"\u003E1.5s\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400; font-size: 8pt;\"\u003E1.7s\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400; font-size: 8pt;\"\u003E1.8s\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Ftd\u003E\n\u003Ctd style=\"width: auto; padding: 10px 13px;\"\u003E\u003Cem\u003E\u003Cspan style=\"font-weight: 400; font-size: 8pt;\"\u003E2m59s\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Cp\u003E\u003Cem\u003E\u003Cspan style=\"font-size: 11.5pt;\"\u003Ecredit: Palina Tolmach [\u003Ca href=\"https:\u002F\u002Fhackmd.io\u002F@SaferMaker\u002FEVM-Sym-Test\"\u003Ehttps:\u002F\u002Fhackmd.io\u002F@SaferMaker\u002FEVM-Sym-Test\u003C\u002Fa\u003E]\u003C\u002Fspan\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003EBetter foundry integration\u003C\u002Fh3\u003E\n\u003Cp\u003EWe removed the middleware that abstracted away the build system and instead invoke \u003Ccode\u003Eforge\u003C\u002Fcode\u003E directly. This results in fewer recompilations and better support for incremental builds, which is great for simple tests where compilation time can dominate. This is particularly true for projects that need to build with \u003Ccode\u003E--via-ir\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch3\u003EMore efficient handling of binary blobs\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EOur EVM interpreter used to wrap every value (e.g. passing through the stack or memory) as a Z3 bit vector, which had the advantage of being consistent and convenient to build expressions mixing concrete and symbolic values. However, profiling revealed that we spent a significant amount of time creating many small Z3 objects, particularly during \u003Ccode\u003EsetUp()\u003C\u002Fcode\u003E and contract creation.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EWe now try to keep large concrete buffers like contract code as concrete values (e.g.\u003Ccode\u003Ebytes\u003C\u002Fcode\u003E) as much as possible and build Z3 expressions lazily. As a result, \u003Ccode\u003EsetUp()\u003C\u002Fcode\u003E time is about 3x faster.\u003C\u002Fp\u003E\n\u003Ch3\u003EBetter Z3 integration\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFirst, we reduced the default solver timeouts during the path exploration phase from 1000ms to 1ms which gives on average much better empirical results.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThen we implemented several optimizations to enhance the efficiency of SMT queries. These include using explicit quantifier instantiations to generate quantifier-free queries, employing an alternative encoding of Z3 const arrays with the SMT-LIB standard array theory, and implementing multi-phase queries for nonlinear arithmetic reasoning.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFinally, we avoid creating unnecessary states. Previously, Halmos eagerly created new symbolic states whenever a conditional branch was encountered. Now a new symbolic state is only created when both branches are feasible according to the path query solver. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAltogether, this improves single thread performance by about 2x.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003EParallel processing\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThis is the first release where Halmos processes work streams in parallel:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ethe \u003Ccode\u003E--test-parallel\u003C\u002Fcode\u003E option spawns a new process for each test function in a contract (improves multi-test performance)\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ethe \u003Ccode\u003E--solver-parallel\u003C\u002Fcode\u003E\u003Cspan style=\"font-weight: 400;\"\u003E option spawns a new thread for each assertion solver within a single test (improves single-test performance)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EEnabling these options results in a 2-4x improvement on large test suites. Note that these options are still considered experimental for now, so they are not enabled by default.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EUsability\u003C\u002Fh2\u003E\n\u003Ch3\u003E\u003Cstrong\u003EExpanded coverage\u003C\u002Fstrong\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos now supports more EVM instructions (\u003Ccode\u003EPUSH0\u003C\u002Fcode\u003E, \u003Ccode\u003EADDMOD\u003C\u002Fcode\u003E, \u003Ccode\u003EMULMOD\u003C\u002Fcode\u003E…) and Foundry cheatcodes (\u003Ccode\u003Evm.store()\u003C\u002Fcode\u003E, \u003Ccode\u003Evm.load()\u003C\u002Fcode\u003E, \u003Ccode\u003Evm.etch()\u003C\u002Fcode\u003E…). In practice, this means that halmos should work out of the box on more contracts and existing test suites.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003EHalmos cheatcodes\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe also released a dedicated repository for \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos-cheatcodes\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehalmos-cheatcodes\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, which makes it easier to create symbolic variables. For instance:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Ccode\u003Esvm.createAddress(\"receiver\")\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Ccode\u003Esvm.createUint256(\"amount\")\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone wp-image-8006 size-full\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002Fcarbon-14.png\" alt=\"cheatcodes\" width=\"1598\" height=\"1200\" srcset=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002Fcarbon-14.png 1598w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002Fcarbon-14-300x225.png 300w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002Fcarbon-14-1024x769.png 1024w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002Fcarbon-14-768x577.png 768w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002Fcarbon-14-1536x1153.png 1536w\" sizes=\"auto, (max-width: 1598px) 100vw, 1598px\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cb\u003E\u003Ccode style=\"font-size: 30px;\"\u003Echeck_\u003C\u002Fcode\u003E\u003C\u002Fb\u003E\u003Cb\u003E is the new \u003C\u002Fb\u003E\u003Cb\u003E\u003Ccode style=\"font-size: 30px;\"\u003Etest\u003C\u002Fcode\u003E\u003C\u002Fb\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe default function prefix for halmos tests has changed — a small but significant change:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003Ebefore v0.1.0, halmos ran\u003Ccode\u003EsetUp()\u003C\u002Fcode\u003E and \u003Ccode\u003Etest*()\u003C\u002Fcode\u003E functions\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003Estarting with v0.1.0, halmos now runs \u003Ccode\u003EsetUp()\u003C\u002Fcode\u003E and \u003Ccode\u003Echeck_*()\u003C\u002Fcode\u003E functions\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EPreviously, halmos would run existing, unmodified tests (both regular and fuzz tests). However this also made it harder to separate tests meant for foundry and tests meant for halmos.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EWith the new \u003Ccode\u003Echeck_\u003C\u002Fcode\u003E prefix, we avoid this confusion by default: halmos integrates with your existing tests without insisting on running everything in your test suite (and foundry by default won’t try to run your symbolic tests either).\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cb\u003E\u003Ccode style=\"font-size: 30px;\"\u003E@custom:halmos\u003C\u002Fcode\u003E\u003C\u002Fb\u003E\u003Cb\u003E tags\u003C\u002Fb\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESuppose you have a codebase with multiple test contracts:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eyou can run the tests in \u003Ccode\u003EContractA\u003C\u002Fcode\u003E with the default settings\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eall tests in \u003Ccode\u003EContractB\u003C\u002Fcode\u003E requires \u003C\u002Fspan\u003E\u003Ccode\u003E--loop 10\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eone test in \u003Ccode\u003EContractB\u003C\u002Fcode\u003E requires \u003C\u002Fspan\u003E\u003Ccode\u003E--smt-div\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn order for Halmos to run the entire test suite, you resort to running \u003C\u002Fspan\u003E\u003Ccode\u003Ehalmos --loop 10 --smt-div\u003C\u002Fcode\u003E\u003Cspan style=\"font-weight: 400;\"\u003E which makes the tests in \u003C\u002Fspan\u003E\u003Ccode\u003EContractA\u003C\u002Fcode\u003E\u003Cspan style=\"font-weight: 400;\"\u003E 10x slower. \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EStarting with Halmos v0.1.0, you can use\u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fdocs.soliditylang.org\u002Fen\u002Flatest\u002Fnatspec-format.html#tags\"\u003E \u003Cspan style=\"font-weight: 400;\"\u003Ecustom NatSpec tags\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E:\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n"},{acf_fc_layout:bA,code_block:"\u002F\u002F\u002F @custom:halmos --loop 10\r\ncontract B {\r\n    function check_loops() public {\r\n        ...\r\n    }\r\n\r\n    \u002F\u002F\u002F @custom:halmos --smt-div\r\n    function check_loopsAndDiv() public {\r\n        ...\r\n    }\r\n}",code_type:cb},{acf_fc_layout:aF,paragraph:"\u003Cp\u003ESo in this example, running \u003Ccode\u003Ehalmos\u003C\u002Fcode\u003E\u003Cspan style=\"font-weight: 400;\"\u003E with the default settings:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Etests \u003Ccode\u003EContractA\u003C\u002Fcode\u003E with the default (fast) settings\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Etests \u003Ccode\u003EContractB\u003C\u002Fcode\u003E run with \u003C\u002Fspan\u003E\u003Ccode\u003E--loop 10\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli style=\"font-weight: 400;\" aria-level=\"1\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Etests \u003C\u002Fspan\u003E\u003Ccode\u003Echeck_loopsAndDiv\u003C\u002Fcode\u003E\u003Cspan style=\"font-weight: 400;\"\u003E with \u003Ccode\u003E--loop 10 --smt-div\u003C\u002Fcode\u003E\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003ENext steps\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos is open source so if you want to get involved, join the \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Ft.me\u002F+4UhzHduai3MzZmUx\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Edev Telegram chat\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E and check out the \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\u002Fcontribute\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Egood first issues\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E — there are still plenty of low hanging fruits, from improving testing to implementing missing opcodes and cheatcodes.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n"}],related_posts:bp},tags:[{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:y,name:aH,slug:aI,term_group:c,term_taxonomy_id:y,taxonomy:m,description:b,parent:c,count:aN,filter:f},{term_id:bC,name:b$,slug:ca,term_group:c,term_taxonomy_id:bC,taxonomy:m,description:b,parent:c,count:a,filter:f}],post_thumbnail:"\u003Cimg width=\"1024\" height=\"576\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-1024x576.jpg\" class=\"attachment-large size-large wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" srcset=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-1024x576.jpg 1024w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-300x169.jpg 300w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-768x432.jpg 768w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-1536x864.jpg 1536w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1.jpg 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" \u002F\u003E",post_thumbnail_small:"\u003Cimg width=\"150\" height=\"150\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-150x150.jpg\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" \u002F\u003E",post_images:[{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-150x150.jpg",width:L},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-300x169.jpg",width:aK},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_1920x1080-1-1024x576.jpg",width:aT}],authors:[{ID:"7022",display_name:"karma (Daniel Reynaud)",first_name:"Daniel",last_name:"Reynaud",user_login:cr,user_email:b,linked_account:b,website:b,description:b,user_nicename:cr,type:aY,nickname:b},{ID:cf,display_name:cg,first_name:ch,last_name:ci,user_login:H,user_email:b,linked_account:b,website:cj,description:ck,user_nicename:H,type:aY,nickname:b}],meta_desc:fO,seo:{title_tag:"July release notes: Halmos - a16z crypto",meta_description:fO,canonical:fP,robots:{index:br,follow:bs,"max-snippet":bt,"max-image-preview":bu,"max-video-preview":bv},open_graph_locale:bw,open_graph_type:q,open_graph_title:cq,open_graph_description:fQ,open_graph_url:fP,open_graph_images:{"https://api.a16zcrypto.com/wp-content/uploads/2023/07/Halmos_ReleaseNotes_Lighthouse_7252023_FB.jpg":{width:1200,height:630,filesize:809353,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_FB.jpg",path:"\u002Fnas\u002Fcontent\u002Flive\u002Fa16zcryptocms\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_FB.jpg",size:bx,id:"8015",alt:b,pixels:756000,type:co}},open_graph_site_name:by,estimated_reading_time_minutes:c,twitter_card:bz,twitter_title:cq,twitter_description:fQ,twitter_image:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F07\u002FHalmos_ReleaseNotes_Lighthouse_7252023_TW.jpg",open_graph_article_published_time:"2023-07-25T15:55:47+00:00"},format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},template:b,disclosure:e},{ID:4465,post_author:bn,post_date:fR,post_date_gmt:fR,post_content:"\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification — the process of using mathematical methods to “inspect” a program or smart contract across any number of inputs — is generally seen as the more concise, more comprehensive alternative to traditional testing for writing higher quality, more secure code. But in reality, formal verification is an open-ended and interactive process. Much like unit testing, developers must dynamically define and layer on formal specifications, iterating on their approach as their code and analyses evolve. Further, formal verification is only as effective as its specifications, which can be time consuming to write (and often come with a steep learning curve). \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFor many developers who find the process daunting, unit tests are often the more cost-effective and time-efficient route to sussing out a program’s correctness. In practice, formal verification is not a more comprehensive alternative to unit testing, but a complementary one. These processes have different strengths and limitations, providing even greater assurance when used together. Developers will always need to write unit tests — so what if we could use the same properties for formal verification?\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, our open source formal verification tool, allows developers to \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ereuse\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E the same properties written for unit tests for formal specifications through symbolic testing. Rather than having to create a robust set of properties from the start, developers can avoid duplicative work and improve their tests a few specifications at a time without starting from scratch. We designed this tool for use, alongside others in the formal verification process, as an on-ramp to formal verification; developers can start with a few analyses with minimal effort, before adding more later in the process.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn this post, we cover the challenges of formal verification, and the potential to bridge the gap between unit testing and formal verification with symbolic testing. We then walk through a demo of Halmos using existing smart contract code, and take a quick look at other formal verification tools (many open source) available to developers.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Formal verification vs testing\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FFormal_verification\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E — generally favored by blockchain developers for its rigor and comprehensiveness — is the process of proving the correctness of a program by verifying that it satisfies certain correctness properties. The properties, which are specific to the program, are usually provided externally and expressed using a formal language or notation that is supported by the verification tool being used. Developers often perceive formal verification as a push-button solution for testing properties across all possible scenarios automatically, but in reality, formal verification can be a labor-intensive and highly interactive process.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ELike formal verification, unit testing involves evaluating whether a program works as expected; testing, however, only checks the program&#8217;s behavior for \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Esome\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E inputs, while formal verification can check it for \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eall\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E possible inputs. Both testing and formal verification require a description of the expected behavior of the program (with test cases used in testing and formal specifications used in formal verification). But, when used together, they can provide a more thorough examination of a program. Testing, for instance, is effective at finding simple bugs and mistakes, but is generally quicker and easier to perform. Formal verification, while more cumbersome to use, is powerful enough to prove the absence of errors or reveal subtle bugs that are easy to miss in testing or code reviews.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Specification overhead\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EOne of the main challenges of formal verification is the overhead of writing and maintaining formal specifications. This process often involves the time-consuming task of manually writing the specifications using a specialized language (that many developers will need to learn first). The process is also incremental, typically starting with writing simple properties and verifying them first, then gradually adding more complex properties on top. Like testing, it is an open-ended process, with no clear stopping point, and one can only add as many properties as possible within the available time frame. Additionally, when developers change the code as it&#8217;s being verified, they must also update their existing specifications, leading to extra maintenance efforts. These factors can make formal verification a daunting task for some developers hesitant to commit to the extra overhead.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAnd although testing and formal verification can improve code quality when used together, both require (sometimes similar) descriptions of a program&#8217;s expected behavior in different languages and formats. Writing and maintaining these descriptions is labor-intensive, and maintaining two different forms of the same description can feel like duplicated effort. This raises the following question: Is it possible to describe the expected behavior in a way that developers can use for both testing and verification?\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Bridging the gap between testing and formal verification with symbolic testing and Halmos\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESymbolic testing, the practice of running tests with symbolic inputs, is an effective formal verification method that reduces specification overhead. This approach enables the use of the same test cases for both testing and formal verification. Unlike traditional testing, which verifies that a program works correctly for a limited set of inputs, symbolic testing checks the program for all possible inputs, hence a program that passes symbolic testing can be considered formally verified.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos is a formal verification tool designed for symbolic testing. Instead of requiring separate specifications or learning a new language, Halmos uses existing tests as formal specifications. Running tests through Halmos will automatically verify they pass for all possible inputs, or provide counterexamples. This not only eliminates the need for additional specification writing, but also allows for the reuse of tests written for unit testing or fuzzing, for formal verification purposes.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EDevelopers thus have greater flexibility to choose from a range of quality assurance options, including unit testing, fuzzing, and formal verification, depending on their current needs. For instance, tests may quickly identify simple mistakes, possibly with the help of a fuzzer that generates random inputs, and then Halmos can further increase confidence in the program&#8217;s correctness across all inputs.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Example: Testing the \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAs an example, consider the following \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function, which determines whether a given number is a power of two. This function uses a \u003C\u002Fspan\u003E\u003Ca href=\"http:\u002F\u002Fgraphics.stanford.edu\u002F~seander\u002Fbithacks.html#DetermineIfPowerOf2\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ebit manipulation algorithm\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E for efficiency, but it can be challenging to prove its correctness, particularly in the case where the input is not a power of two.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2659\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FisPowerOfTwo.png\" alt=\"\" width=\"1278\" height=\"558\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EImagine the following test for the \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function: it compares the actual output of the function with the expected output for a given input. This is a parameterized test (also known as a property-based test), meaning that you can easily run it with different input values, possibly with fuzzing tools like Foundry.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2660\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FtestIsPowerOfTwo.png\" alt=\"\" width=\"1396\" height=\"558\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EYou can use this test to examine the \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function through unit testing or fuzz testing, running it with a selection of inputs. Tests like these cannot formally prove the correctness of the function, as it is computationally infeasible to run the test for every possible input.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos, however, allows developers to reuse these pre-existing tests for formal verification with only a little extra effort. The tool checks that tests pass for all possible inputs by performing symbolic execution of the test and then verifying that the assertion is never violated, (or, if the assertion \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eis\u003C\u002Fspan\u003E\u003C\u002Fi\u003E \u003Cspan style=\"font-weight: 400;\"\u003Eviolated\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, by providing a counterexample). This means that if the test passes Halmos, the correctness of the function is formally verified, meaning the algorithm is correctly implemented and has been accurately translated by the compiler into bytecode.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Limitation: Bounded symbolic execution\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIt is generally not possible to perform fully automatic, complete symbolic testing, as this would require solving the \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FHalting_problem\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehalting problem\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, which is known to be \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FUndecidable_problem\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eundecidable\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E. One reason for this is that it is often impossible to determine automatically how many times a loop should iterate symbolically. As a result, fully automatic formal verification is generally undecidable.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EGiven these fundamental limitations, Halmos prioritizes automation over completeness. To this end, Halmos is designed to perform bounded symbolic reasoning for unbounded loops (where the number of iterations depends on program inputs) or variable-length arrays (including strings). This sacrifices some completeness, but allows Halmos to avoid requiring the user to provide additional annotations such as loop invariants.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFor example, consider the following iterative version of the \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function, which features an unbounded while loop, where the number of loop iterations is determined by the minimum number of bits required to represent the input number.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2662\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FisPowerOfTwoIter.png\" alt=\"\" width=\"1346\" height=\"520\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos symbolically iterates this unbounded loop only up to a specified bound. For instance, if the bound is set to 3, Halmos will iterate the loop at most 3 times and will not consider input values that would cause the loop to iterate more than 3 times (i.e., any values greater than or equal to 2^3). In this particular case, setting the bound to 256 or higher would allow Halmos to be complete.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Demo: Formal verification of ERC721A with Halmos\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETo demonstrate the capabilities of Halmos, we used it to symbolically test and formally verify \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fwww.erc721a.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EERC721A\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, a highly gas-optimized implementation of the ERC721 standard that allows for batch minting at almost the same cost as single minting. ERC721A includes several innovative \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fwww.azuki.com\u002Ferc721a\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eoptimizations\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E to achieve this efficiency; for example, gas can be saved by delaying updates to the token ownership data until the token is transferred, not at the time of minting. This requires the use of complex data structures and algorithms to efficiently retrieve ownership information from the lazy data structure. And although this optimization improves gas efficiency, it also increases code complexity and makes it challenging to prove the implementation&#8217;s correctness. This makes ERC721A a good candidate for formal verification, as it can increase confidence in the implementation and benefit potential users.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESymbolic testing properties\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESince the existing tests for ERC721A were written in JavaScript with Hardhat (which is not currently supported by Halmos), we wrote new tests in Solidity for the main entry point functions: \u003Ccode\u003Emint()\u003C\u002Fcode\u003E, \u003Ccode\u003Eburn()\u003C\u002Fcode\u003E, and \u003Ccode\u003Etransfer()\u003C\u002Fcode\u003E. These tests checked that each function correctly updates token ownership and balance, and only affects the relevant users without altering the balance or ownership of other users. The latter is non-trivial to prove due to the use of the lazy data structure algorithm in ERC721A. For example, the following test checks that the \u003Ccode\u003Etransfer()\u003C\u002Fcode\u003E function correctly updates the ownership of the specified token:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2661\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FtestTransferOwnershipUpdate.png\" alt=\"\" width=\"1144\" height=\"632\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAnother test checks that the \u003Ccode\u003Etransfer()\u003C\u002Fcode\u003E function does not alter the balance for other addresses, which is challenging to prove as mentioned earlier:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2663\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FtestTransferOtherBalancePreservation.png\" alt=\"\" width=\"1414\" height=\"894\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Verification results\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe conducted a verification experiment using Halmos on the ERC721A smart contract by writing a total of \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdaejunpark\u002FERC721A\u002Fpull\u002F2\u002Ffiles\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E19 tests\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E. The tests were run through Halmos with a loop unrolling bound of 3, which took 16 minutes to complete. The breakdown of the verification time can be seen in the table below. The experiment was conducted on a MacBook Pro with an M1 Pro chip and 16 GB of memory.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETest\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETime (s)\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnBalanceUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E6.67\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnNextTokenIdUnchanged\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E1.40\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnOtherBalancePreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E5.69\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnOtherOwnershipPreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E189.70\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnOwnershipUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E3.81\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnRequirements\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E71.95\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintBalanceUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.20\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintNextTokenIdUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.18\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintOtherBalancePreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.26\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintOtherOwnershipPreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E5.74\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintOwnershipUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E1.38\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintRequirements\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.09\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferBalanceUnchanged\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E9.03\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferBalanceUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E53.53\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferNextTokenIdUnchanged\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E4.47\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferOtherBalancePreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E19.57\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferOtherOwnershipPreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E430.61\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferOwnershipUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E18.71\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferRequirements\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E149.18\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Cp\u003E&nbsp;\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhile most of the tests were completed in a matter of seconds, a few of them took several minutes. These time-consuming tests were challenging to verify due to the complex nature of the cases to be considered, and were closely related to the correctness of the lazy data structure algorithm.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EOverall, the results of this experiment indicate that Halmos is able to effectively verify the correctness of smart contract code. It provides increased confidence in the code&#8217;s integrity, despite the complexity and potential edge cases of the smart contract.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Experiment with injected bugs\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETo demonstrate the effectiveness of Halmos&#8217;s bounded reasoning, we used it to detect bugs in a previous version of the ERC721A contract. This version had an issue that mishandled arithmetic overflow and potentially allowed for batch-minting a large number of tokens, which could break the integrity of the lazy data structure and result in some users losing their token ownership (an issue \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fchiru-labs\u002FERC721A\u002Fpull\u002F420\u002Ffiles\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eresolved\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E in the current version). We ran the same set of 19 tests for ERC721A on the buggy version, and Halmos was able to find a counterexample for the properties of the \u003Ccode\u003Emint()\u003C\u002Fcode\u003E function. Specifically, Halmos provided input values that led to the exploit scenario described above. The results of this experiment indicate that, despite its incompleteness, Halmos&#8217;s bounded reasoning can be an effective way of detecting and preventing exploitable bugs in smart contracts.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Related work\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification tools for Ethereum smart contract bytecode have been developed by various teams. These tools, including Halmos, can be used to help ensure the security and correctness of smart contracts. Comparing and understanding the different features, capabilities, and limitations of these tools can help developers choose the most appropriate one for their unique needs.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhile Halmos is a valuable addition to the toolset available for smart contract verification, it is meant to complement (not replace) existing tools. Developers can combine Halmos with other tools to achieve a higher level of assurance in their contracts. Below, we compare Halmos with a few selected formal tools that support EVM bytecode.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkframework.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EK\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is a powerful formal verification framework that enables deductive verification and interactive theorem proving. Its underlying theory and implementation provide a high level of expressiveness, making it suitable for verifying complex programs and algorithms. However, it should be noted that K is not designed with heavy emphasis on automated verification and lacks certain automation features which can require more manual effort during the verification process. To use the K framework, formal specifications are written in the K language, which must be learned prior to use. Its strength is particularly useful in verifying complex systems, which may be challenging to analyze using automated reasoning.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.certora.com\u002F\"\u003ECertora\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is a formal verification tool for smart contracts that focuses on automated verification and supports bounded model checking, similar to Halmos. To use Certora, developers must learn their new language, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fdocs.certora.com\u002Fen\u002Flatest\u002Fdocs\u002Fcvl\u002Findex.html\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ECVL\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, in order to write specifications. This language allows for the concise description of many critical properties through contract invariants, a feature that Halmos currently does not support. Despite being a closed-source, proprietary tool, Certora provides robust formal verification tooling, with ongoing development and good user support.\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos, on the other hand, is an open-source tool that is smaller in scale and currently lacks some features provided by Certora, but it is meant to serve as a public good and is intended as a niche solution for quickly verifying smart contracts without the need for extensive setup and maintenance.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fhevm.dev\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHEVM\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is another formal verification tool that is similar to Halmos. It was previously part of DappTools, which is a precursor of Foundry. Both HEVM and Halmos have the feature of not requiring a separate specification and can symbolically execute existing tests to identify assertion violations. This allows users to use both tools interchangeably or run them in parallel for the same tests, providing them with multiple options for symbolic testing.\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIt&#8217;s worth noting that, despite their similarities, HEVM and Halmos have been independently developed and differ in their implementation details; particularly in terms of optimizations and symbolic reasoning strategies. Additionally, HEVM is written in Haskell, while Halmos is written in Python, providing exposure to the rich Python ecosystem. Having the ability to use both tools gives users more flexibility and options to ensure the security and correctness of smart contracts.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003EHalmos\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is open source, and currently in its beta phase. We are actively working on new \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\u002Fissues\u002F15\"\u003Efeatures\u003C\u002Fa\u003E and functionality, including Foundry cheat codes and several other key usability features. We would greatly appreciate your thoughts on which features are most important, and welcome any feedback, suggestions, and contributions to make Halmos a better tool for everyone.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003E**\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe views expressed here are those of the individual AH Capital Management, L.L.C. (“a16z”) personnel quoted and are not the views of a16z or its affiliates. Certain information contained in here has been obtained from third-party sources, including from portfolio companies of funds managed by a16z. While taken from sources believed to be reliable, a16z has not independently verified such information and makes no representations about the current or enduring accuracy of the information or its appropriateness for a given situation. In addition, this content may include third-party advertisements; a16z has not reviewed such advertisements and does not endorse any advertising content contained therein.\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThis content is provided for informational purposes only, and should not be relied upon as legal, business, investment, or tax advice. You should consult your own advisers as to those matters. References to any securities or digital assets are for illustrative purposes only, and do not constitute an investment recommendation or offer to provide investment advisory services. Furthermore, this content is not directed at nor intended for use by any investors or prospective investors, and may not under any circumstances be relied upon when making a decision to invest in any fund managed by a16z. (An offering to invest in an a16z fund will be made only by the private placement memorandum, subscription agreement, and other relevant documentation of any such fund and should be read in their entirety.) Any investments or portfolio companies mentioned, referred to, or described are not representative of all investments in vehicles managed by a16z, and there can be no assurance that the investments will be profitable or that other investments made in the future will have similar characteristics or results. A list of investments made by funds managed by Andreessen Horowitz (excluding investments for which the issuer has not provided permission for a16z to disclose publicly as well as unannounced investments in publicly traded digital assets) is available at https:\u002F\u002Fa16z.com\u002Finvestments\u002F.\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003ECharts and graphs provided within are for informational purposes solely and should not be relied upon when making any investment decision. Past performance is not indicative of future results. The content speaks only as of the date indicated. Any projections, estimates, forecasts, targets, prospects, and\u002For opinions expressed in these materials are subject to change without notice and may differ or be contrary to opinions expressed by others. Please see https:\u002F\u002Fa16z.com\u002Fdisclosures for additional important information.\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003C\u002Fp\u003E\n",post_title:"Symbolic testing with Halmos: Leveraging existing tests for formal verification",post_excerpt:b,post_status:z,comment_status:aE,ping_status:aE,post_password:b,post_name:"symbolic-testing-with-halmos-leveraging-existing-tests-for-formal-verification",to_ping:b,pinged:b,post_modified:"2024-07-19 09:21:40",post_modified_gmt:"2024-07-19 16:21:40",post_content_filtered:b,post_parent:c,guid:"https:\u002F\u002Fa16zcrypto.approvemyviews.com\u002F?p=4465",menu_order:c,post_type:bo,post_mime_type:b,comment_count:o,filter:f,taxonomies:[{term_id:aM,name:H,slug:cd,term_group:c,term_taxonomy_id:aM,taxonomy:aX,description:ce,parent:c,count:bm,filter:f},{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},{term_id:B,name:aO,slug:aP,term_group:c,term_taxonomy_id:B,taxonomy:A,description:b,parent:c,count:aQ,filter:f},{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:y,name:aH,slug:aI,term_group:c,term_taxonomy_id:y,taxonomy:m,description:b,parent:c,count:aN,filter:f}],acf:{custom_title:b,redirect_author_links_to_the_post:e,content:[{acf_fc_layout:aF,paragraph:"\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification — the process of using mathematical methods to “inspect” a program or smart contract across any number of inputs — is generally seen as the more concise, more comprehensive alternative to traditional testing for writing higher quality, more secure code. But in reality, formal verification is an open-ended and interactive process. Much like unit testing, developers must dynamically define and layer on formal specifications, iterating on their approach as their code and analyses evolve. Further, formal verification is only as effective as its specifications, which can be time consuming to write (and often come with a steep learning curve). \u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFor many developers who find the process daunting, unit tests are often the more cost-effective and time-efficient route to sussing out a program’s correctness. In practice, formal verification is not a more comprehensive alternative to unit testing, but a complementary one. These processes have different strengths and limitations, providing even greater assurance when used together. Developers will always need to write unit tests — so what if we could use the same properties for formal verification?\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, our open source formal verification tool, allows developers to \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ereuse\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E the same properties written for unit tests for formal specifications through symbolic testing. Rather than having to create a robust set of properties from the start, developers can avoid duplicative work and improve their tests a few specifications at a time without starting from scratch. We designed this tool for use, alongside others in the formal verification process, as an on-ramp to formal verification; developers can start with a few analyses with minimal effort, before adding more later in the process.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIn this post, we cover the challenges of formal verification, and the potential to bridge the gap between unit testing and formal verification with symbolic testing. We then walk through a demo of Halmos using existing smart contract code, and take a quick look at other formal verification tools (many open source) available to developers.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Formal verification vs testing\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FFormal_verification\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E — generally favored by blockchain developers for its rigor and comprehensiveness — is the process of proving the correctness of a program by verifying that it satisfies certain correctness properties. The properties, which are specific to the program, are usually provided externally and expressed using a formal language or notation that is supported by the verification tool being used. Developers often perceive formal verification as a push-button solution for testing properties across all possible scenarios automatically, but in reality, formal verification can be a labor-intensive and highly interactive process.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ELike formal verification, unit testing involves evaluating whether a program works as expected; testing, however, only checks the program&#8217;s behavior for \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Esome\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E inputs, while formal verification can check it for \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eall\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003Cspan style=\"font-weight: 400;\"\u003E possible inputs. Both testing and formal verification require a description of the expected behavior of the program (with test cases used in testing and formal specifications used in formal verification). But, when used together, they can provide a more thorough examination of a program. Testing, for instance, is effective at finding simple bugs and mistakes, but is generally quicker and easier to perform. Formal verification, while more cumbersome to use, is powerful enough to prove the absence of errors or reveal subtle bugs that are easy to miss in testing or code reviews.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Specification overhead\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EOne of the main challenges of formal verification is the overhead of writing and maintaining formal specifications. This process often involves the time-consuming task of manually writing the specifications using a specialized language (that many developers will need to learn first). The process is also incremental, typically starting with writing simple properties and verifying them first, then gradually adding more complex properties on top. Like testing, it is an open-ended process, with no clear stopping point, and one can only add as many properties as possible within the available time frame. Additionally, when developers change the code as it&#8217;s being verified, they must also update their existing specifications, leading to extra maintenance efforts. These factors can make formal verification a daunting task for some developers hesitant to commit to the extra overhead.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAnd although testing and formal verification can improve code quality when used together, both require (sometimes similar) descriptions of a program&#8217;s expected behavior in different languages and formats. Writing and maintaining these descriptions is labor-intensive, and maintaining two different forms of the same description can feel like duplicated effort. This raises the following question: Is it possible to describe the expected behavior in a way that developers can use for both testing and verification?\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Bridging the gap between testing and formal verification with symbolic testing and Halmos\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESymbolic testing, the practice of running tests with symbolic inputs, is an effective formal verification method that reduces specification overhead. This approach enables the use of the same test cases for both testing and formal verification. Unlike traditional testing, which verifies that a program works correctly for a limited set of inputs, symbolic testing checks the program for all possible inputs, hence a program that passes symbolic testing can be considered formally verified.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos is a formal verification tool designed for symbolic testing. Instead of requiring separate specifications or learning a new language, Halmos uses existing tests as formal specifications. Running tests through Halmos will automatically verify they pass for all possible inputs, or provide counterexamples. This not only eliminates the need for additional specification writing, but also allows for the reuse of tests written for unit testing or fuzzing, for formal verification purposes.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EDevelopers thus have greater flexibility to choose from a range of quality assurance options, including unit testing, fuzzing, and formal verification, depending on their current needs. For instance, tests may quickly identify simple mistakes, possibly with the help of a fuzzer that generates random inputs, and then Halmos can further increase confidence in the program&#8217;s correctness across all inputs.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E[toc-embed]Example: Testing the isPowerOfTwo() function\u003C\u002Fh3\u003E\n\u003Cp\u003EAs an example, consider the following \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function, which determines whether a given number is a power of two. This function uses a \u003Ca href=\"http:\u002F\u002Fgraphics.stanford.edu\u002F~seander\u002Fbithacks.html#DetermineIfPowerOf2\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ebit manipulation algorithm\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E for efficiency, but it can be challenging to prove its correctness, particularly in the case where the input is not a power of two.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2659\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FisPowerOfTwo.png\" alt=\"\" width=\"1278\" height=\"558\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EImagine the following test for the \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function: it compares the actual output of the function with the expected output for a given input. This is a parameterized test (also known as a property-based test), meaning that you can easily run it with different input values, possibly with fuzzing tools like Foundry.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2660\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FtestIsPowerOfTwo.png\" alt=\"\" width=\"1396\" height=\"558\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EYou can use this test to examine the \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function through unit testing or fuzz testing, running it with a selection of inputs. Tests like these cannot formally prove the correctness of the function, as it is computationally infeasible to run the test for every possible input.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos, however, allows developers to reuse these pre-existing tests for formal verification with only a little extra effort. The tool checks that tests pass for all possible inputs by performing symbolic execution of the test and then verifying that the assertion is never violated, (or, if the assertion \u003C\u002Fspan\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eis\u003C\u002Fspan\u003E\u003C\u002Fi\u003E \u003Cspan style=\"font-weight: 400;\"\u003Eviolated\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, by providing a counterexample). This means that if the test passes Halmos, the correctness of the function is formally verified, meaning the algorithm is correctly implemented and has been accurately translated by the compiler into bytecode.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Limitation: Bounded symbolic execution\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIt is generally not possible to perform fully automatic, complete symbolic testing, as this would require solving the \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FHalting_problem\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Ehalting problem\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, which is known to be \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FUndecidable_problem\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eundecidable\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E. One reason for this is that it is often impossible to determine automatically how many times a loop should iterate symbolically. As a result, fully automatic formal verification is generally undecidable.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EGiven these fundamental limitations, Halmos prioritizes automation over completeness. To this end, Halmos is designed to perform bounded symbolic reasoning for unbounded loops (where the number of iterations depends on program inputs) or variable-length arrays (including strings). This sacrifices some completeness, but allows Halmos to avoid requiring the user to provide additional annotations such as loop invariants.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFor example, consider the following iterative version of the \u003Ccode\u003EisPowerOfTwo()\u003C\u002Fcode\u003E function, which features an unbounded while loop, where the number of loop iterations is determined by the minimum number of bits required to represent the input number.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2662\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FisPowerOfTwoIter.png\" alt=\"\" width=\"1346\" height=\"520\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos symbolically iterates this unbounded loop only up to a specified bound. For instance, if the bound is set to 3, Halmos will iterate the loop at most 3 times and will not consider input values that would cause the loop to iterate more than 3 times (i.e., any values greater than or equal to 2^3). In this particular case, setting the bound to 256 or higher would allow Halmos to be complete.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Demo: Formal verification of ERC721A with Halmos\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003ETo demonstrate the capabilities of Halmos, we used it to symbolically test and formally verify \u003Ca href=\"https:\u002F\u002Fwww.erc721a.org\u002F\"\u003EERC721A\u003C\u002Fa\u003E, a highly gas-optimized implementation of the ERC721 standard that allows for batch minting at almost the same cost as single minting. ERC721A includes several innovative \u003Ca href=\"https:\u002F\u002Fwww.azuki.com\u002Ferc721a\"\u003Eoptimizations\u003C\u002Fa\u003E to achieve this efficiency; for example, gas can be saved by delaying updates to the token ownership data until the token is transferred, not at the time of minting. This requires the use of complex data structures and algorithms to efficiently retrieve ownership information from the lazy data structure. And although this optimization improves gas efficiency, it also increases code complexity and makes it challenging to prove the implementation&#8217;s correctness. This makes ERC721A a good candidate for formal verification, as it can increase confidence in the implementation and benefit potential users.n&gt;\u003C\u002Fp\u003E\n\u003Ch4\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESymbolic testing properties\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ESince the existing tests for ERC721A were written in JavaScript with Hardhat (which is not currently supported by Halmos), we wrote new tests in Solidity for the main entry point functions: \u003Ccode\u003Emint()\u003C\u002Fcode\u003E, \u003Ccode\u003Eburn()\u003C\u002Fcode\u003E, and \u003Ccode\u003Etransfer()\u003C\u002Fcode\u003E. These tests checked that each function correctly updates token ownership and balance, and only affects the relevant users without altering the balance or ownership of other users. The latter is non-trivial to prove due to the use of the lazy data structure algorithm in ERC721A. For example, the following test checks that the \u003Ccode\u003Etransfer()\u003C\u002Fcode\u003E function correctly updates the ownership of the specified token:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2661\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FtestTransferOwnershipUpdate.png\" alt=\"\" width=\"1144\" height=\"632\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EAnother test checks that the \u003Ccode\u003Etransfer()\u003C\u002Fcode\u003E function does not alter the balance for other addresses, which is challenging to prove as mentioned earlier:\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-2663\" src=\"https:\u002F\u002Fa16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FtestTransferOtherBalancePreservation.png\" alt=\"\" width=\"1414\" height=\"894\" \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Verification results\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWe conducted a verification experiment using Halmos on the ERC721A smart contract by writing a total of \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdaejunpark\u002FERC721A\u002Fpull\u002F2\u002Ffiles\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003E19 tests\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E. The tests were run through Halmos with a loop unrolling bound of 3, which took 16 minutes to complete. The breakdown of the verification time can be seen in the table below. The experiment was conducted on a MacBook Pro with an M1 Pro chip and 16 GB of memory.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ctable\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETest\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETime (s)\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnBalanceUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E6.67\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnNextTokenIdUnchanged\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E1.40\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnOtherBalancePreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E5.69\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnOtherOwnershipPreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E189.70\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnOwnershipUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E3.81\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestBurnRequirements\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E71.95\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintBalanceUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.20\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintNextTokenIdUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.18\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintOtherBalancePreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.26\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintOtherOwnershipPreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E5.74\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintOwnershipUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E1.38\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestMintRequirements\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E0.09\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferBalanceUnchanged\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E9.03\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferBalanceUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E53.53\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferNextTokenIdUnchanged\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E4.47\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferOtherBalancePreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E19.57\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferOtherOwnershipPreservation\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E430.61\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferOwnershipUpdate\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E18.71\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003EtestTransferRequirements\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cspan style=\"font-weight: 400;\"\u003E149.18\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhile most of the tests were completed in a matter of seconds, a few of them took several minutes. These time-consuming tests were challenging to verify due to the complex nature of the cases to be considered, and were closely related to the correctness of the lazy data structure algorithm.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EOverall, the results of this experiment indicate that Halmos is able to effectively verify the correctness of smart contract code. It provides increased confidence in the code&#8217;s integrity, despite the complexity and potential edge cases of the smart contract.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Experiment with injected bugs\u003C\u002Fspan\u003E\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003ETo demonstrate the effectiveness of Halmos&#8217;s bounded reasoning, we used it to detect bugs in a previous version of the ERC721A contract. This version had an issue that mishandled arithmetic overflow and potentially allowed for batch-minting a large number of tokens, which could break the integrity of the lazy data structure and result in some users losing their token ownership (an issue \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fchiru-labs\u002FERC721A\u002Fpull\u002F420\u002Ffiles\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003Eresolved\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E in the current version). We ran the same set of 19 tests for ERC721A on the buggy version, and Halmos was able to find a counterexample for the properties of the \u003Ccode\u003Emint()\u003C\u002Fcode\u003E function. Specifically, Halmos provided input values that led to the exploit scenario described above. The results of this experiment indicate that, despite its incompleteness, Halmos&#8217;s bounded reasoning can be an effective way of detecting and preventing exploitable bugs in smart contracts.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\u003Cspan style=\"font-weight: 400;\"\u003E[toc-embed]Related work\u003C\u002Fspan\u003E\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EFormal verification tools for Ethereum smart contract bytecode have been developed by various teams. These tools, including Halmos, can be used to help ensure the security and correctness of smart contracts. Comparing and understanding the different features, capabilities, and limitations of these tools can help developers choose the most appropriate one for their unique needs.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003EWhile Halmos is a valuable addition to the toolset available for smart contract verification, it is meant to complement (not replace) existing tools. Developers can combine Halmos with other tools to achieve a higher level of assurance in their contracts. Below, we compare Halmos with a few selected formal tools that support EVM bytecode.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkframework.org\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EK\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is a powerful formal verification framework that enables deductive verification and interactive theorem proving. Its underlying theory and implementation provide a high level of expressiveness, making it suitable for verifying complex programs and algorithms. However, it should be noted that K is not designed with heavy emphasis on automated verification and lacks certain automation features which can require more manual effort during the verification process. To use the K framework, formal specifications are written in the K language, which must be learned prior to use. Its strength is particularly useful in verifying complex systems, which may be challenging to analyze using automated reasoning.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.certora.com\u002F\"\u003ECertora\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is a formal verification tool for smart contracts that focuses on automated verification and supports bounded model checking, similar to Halmos. To use Certora, developers must learn their new language, \u003C\u002Fspan\u003E\u003Ca href=\"https:\u002F\u002Fdocs.certora.com\u002Fen\u002Flatest\u002Fdocs\u002Fcvl\u002Findex.html\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003ECVL\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E, in order to write specifications. This language allows for the concise description of many critical properties through contract invariants, a feature that Halmos currently does not support. Despite being a closed-source, proprietary tool, Certora provides robust formal verification tooling, with ongoing development and good user support.\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHalmos, on the other hand, is an open-source tool that is smaller in scale and currently lacks some features provided by Certora, but it is meant to serve as a public good and is intended as a niche solution for quickly verifying smart contracts without the need for extensive setup and maintenance.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fhevm.dev\u002F\"\u003E\u003Cspan style=\"font-weight: 400;\"\u003EHEVM\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is another formal verification tool that is similar to Halmos. It was previously part of DappTools, which is a precursor of Foundry. Both HEVM and Halmos have the feature of not requiring a separate specification and can symbolically execute existing tests to identify assertion violations. This allows users to use both tools interchangeably or run them in parallel for the same tests, providing them with multiple options for symbolic testing.\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003E\u003Cbr \u002F\u003E\n\u003C\u002Fspan\u003E\u003Cspan style=\"font-weight: 400;\"\u003EIt&#8217;s worth noting that, despite their similarities, HEVM and Halmos have been independently developed and differ in their implementation details; particularly in terms of optimizations and symbolic reasoning strategies. Additionally, HEVM is written in Haskell, while Halmos is written in Python, providing exposure to the rich Python ecosystem. Having the ability to use both tools gives users more flexibility and options to ensure the security and correctness of smart contracts.\u003C\u002Fspan\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\"\u003EHalmos\u003C\u002Fa\u003E\u003Cspan style=\"font-weight: 400;\"\u003E is open source, and currently in its beta phase. We are actively working on new \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fa16z\u002Fhalmos\u002Fissues\u002F15\"\u003Efeatures\u003C\u002Fa\u003E and functionality, including Foundry cheat codes and several other key usability features. We would greatly appreciate your thoughts on which features are most important, and welcome any feedback, suggestions, and contributions to make Halmos a better tool for everyone.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400;\"\u003E**\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThe views expressed here are those of the individual AH Capital Management, L.L.C. (“a16z”) personnel quoted and are not the views of a16z or its affiliates. Certain information contained in here has been obtained from third-party sources, including from portfolio companies of funds managed by a16z. While taken from sources believed to be reliable, a16z has not independently verified such information and makes no representations about the current or enduring accuracy of the information or its appropriateness for a given situation. In addition, this content may include third-party advertisements; a16z has not reviewed such advertisements and does not endorse any advertising content contained therein.\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003EThis content is provided for informational purposes only, and should not be relied upon as legal, business, investment, or tax advice. You should consult your own advisers as to those matters. References to any securities or digital assets are for illustrative purposes only, and do not constitute an investment recommendation or offer to provide investment advisory services. Furthermore, this content is not directed at nor intended for use by any investors or prospective investors, and may not under any circumstances be relied upon when making a decision to invest in any fund managed by a16z. (An offering to invest in an a16z fund will be made only by the private placement memorandum, subscription agreement, and other relevant documentation of any such fund and should be read in their entirety.) Any investments or portfolio companies mentioned, referred to, or described are not representative of all investments in vehicles managed by a16z, and there can be no assurance that the investments will be profitable or that other investments made in the future will have similar characteristics or results. A list of investments made by funds managed by Andreessen Horowitz (excluding investments for which the issuer has not provided permission for a16z to disclose publicly as well as unannounced investments in publicly traded digital assets) is available at \u003Ca href=\"https:\u002F\u002Fa16z.com\u002Finvestments\u002F\"\u003Ehttps:\u002F\u002Fa16z.com\u002Finvestments\u002F\u003C\u002Fa\u003E.\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ci\u003E\u003Cspan style=\"font-weight: 400;\"\u003ECharts and graphs provided within are for informational purposes solely and should not be relied upon when making any investment decision. Past performance is not indicative of future results. The content speaks only as of the date indicated. Any projections, estimates, forecasts, targets, prospects, and\u002For opinions expressed in these materials are subject to change without notice and may differ or be contrary to opinions expressed by others. Please see \u003Ca href=\"https:\u002F\u002Fa16z.com\u002Fdisclosures\"\u003Ehttps:\u002F\u002Fa16z.com\u002Fdisclosures\u003C\u002Fa\u003E for additional important information.\u003C\u002Fspan\u003E\u003C\u002Fi\u003E\u003C\u002Fp\u003E\n"}],related_posts:bp,post_redirector:e,format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},disclosure_relation:e},tags:[{term_id:r,name:F,slug:G,term_group:c,term_taxonomy_id:r,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:s,name:D,slug:E,term_group:c,term_taxonomy_id:s,taxonomy:m,description:b,parent:c,count:p,filter:f},{term_id:y,name:aH,slug:aI,term_group:c,term_taxonomy_id:y,taxonomy:m,description:b,parent:c,count:aN,filter:f}],post_thumbnail:"\u003Cimg width=\"1024\" height=\"576\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-1024x576.webp\" class=\"attachment-large size-large wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" srcset=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-1024x576.webp 1024w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-300x169.webp 300w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-768x432.webp 768w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-1536x864.webp 1536w, https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\" \u002F\u003E",post_thumbnail_small:"\u003Cimg width=\"150\" height=\"150\" src=\"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-150x150.webp\" class=\"attachment-thumbnail size-thumbnail wp-post-image\" alt=\"\" decoding=\"async\" loading=\"lazy\" \u002F\u003E",post_images:[{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-150x150.webp",width:L},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-300x169.webp",width:aK},{url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080-1024x576.webp",width:aT}],authors:[{ID:cf,display_name:cg,first_name:ch,last_name:ci,user_login:H,user_email:b,linked_account:b,website:cj,description:ck,user_nicename:H,type:aY,nickname:b}],meta_desc:cs,seo:{title_tag:fS,meta_description:cs,canonical:fT,robots:{index:br,follow:bs,"max-snippet":bt,"max-image-preview":bu,"max-video-preview":bv},open_graph_locale:bw,open_graph_type:q,open_graph_title:fS,open_graph_description:cs,open_graph_url:fT,open_graph_images:{"https://api.a16zcrypto.com/wp-content/uploads/2023/02/Symtest_Lighthouse_1920x1080.webp":{width:cl,height:cm,filesize:776072,url:"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080.webp",path:"\u002Fnas\u002Fcontent\u002Flive\u002Fa16zcryptocms\u002Fwp-content\u002Fuploads\u002F2023\u002F02\u002FSymtest_Lighthouse_1920x1080.webp",size:bx,id:4466,alt:b,pixels:cn,type:"image\u002Fwebp"}},open_graph_site_name:by,estimated_reading_time_minutes:15,twitter_card:bz,twitter_title:b,twitter_description:b,twitter_image:b,open_graph_article_published_time:"2023-02-02T12:08:38+00:00"},format:{term_id:n,name:v,slug:q,term_group:c,term_taxonomy_id:n,taxonomy:w,description:b,parent:c,count:x,filter:f},template:b,disclosure:e}],termFeaturedPosts:[]},"PostOneCol:0":{},"PostOneCol:1":{},"PostOneCol:2":{},"PostOneCol:3":{},"A16zFooter:0":{toggleDropdown:e,general_content:ct,footer_menu:cv,socials:cw,streamings:cx,puzzle:e,puzzleEnabled:bD,puzzleCode1:cG,puzzleCode2:cH}},mutations:[]}}(1,"",0,null,false,"raw","inherit","image","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-includes\u002Fimages\u002Fmedia\u002Fdefault.png","image\u002Fsvg+xml","svg+xml","29","post_tag",1882,"0",4,"article",1789,2007,"17","closed","articles","format",482,1790,"publish","category",1735,"research","Halmos","halmos","formal verification","formal-verification","daejun-park","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fafriex.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Faxal.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fbello.svg",150,"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fcapsule.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fchainpatrol.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FCollar_Wordmark_Yellow-Michael-Moulton.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002Flogo_nooutline_width60-1-Elisabeth-Duijnstee.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fdiscove.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002Fethxy-dark-J-Eth.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fid.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Ffancraze.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Ffine.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fflashbot.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fformless.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Ffrens.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Ffuul.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fgandalf.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fgoldfinch.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fiyk.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fkiki.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002Fmagicblock_white-1-Andrea-Fortugno.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fmbd.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fmentaport.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fmir.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fnarval.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FNEBRA_logo_1-Shumo-Chu.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FFrame-27-Rishav-Mukherji.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FNodeKit-Logo-Atomic-Abyss-1-Nick-Preszler.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fnotion-finance.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FOpenTrade-logo-2-David-Sutter.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fphantom.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fpimlico.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FPlaymint_Logo_Export_Colour_Black-Luke-Gibson.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fprimev.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FRoux_logo_castiron-Lisa-Grimm.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fshield.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002Fsiren_Logo_black-1-Andrei-Anisimov.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fskylab.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002Ftransparent-Kaito-Yanai.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fspring.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fstackr.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fteller-1.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002Flogo_black.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Ftriangle-labs.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002Flogo-1-Michelle-Latzer.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fweb3analytics.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fzero-dev.svg","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F09\u002FzkSpin-Logo-Justin-Zhang.svg","2024-10-10 03:10:31","open","paragraph","nav_menu_item","open source","open-source",369,300,"2024-10-10 03:10:30",258,31,"code &amp; engineering","code-engineering",42,"https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fblockus.png",428,1024,"page","post_type","Page","author","guest-author","policy",1734,"decentralization","security","2024-08-28 07:31:42","2024-08-28 07:31:43","2024-08-28 07:31:44","2024-08-28 07:32:35","2024-08-28 07:32:36","2024-08-28 07:32:37","2024-08-28 07:32:38","2024-08-28 07:32:39","6","custom","2024-10-10 10:10:31",7,"16","post","auto","The challenges of assembly implementation in Pectra system contracts. Plus, an approach to formal verification using halmos.","index","follow","max-snippet:-1","max-image-preview:large","max-video-preview:-1","en_US","full","a16z crypto","summary_large_image","code_block","How to implement stateful invariant testing using Halmos, a symbolic testing tool for EVM smart contracts.",1942,true,"afriex","axal","bello","blockus","capsule","id","flashbot","gandalf","iyk","mbd","mentaport","mir","narval","primev","shield","skylab","spring","stackr","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F08\u002Fcta-backgrtound.png",1312,623,"2024-10-10 10:10:30","podcast","release notes","release-notes","Solidity","Formal verification of Pectra system contracts with Halmos","cap-daejun-park","Daejun Park Daejun Park daejun-park 1256 ","1256","Daejun Park","Daejun","Park","https:\u002F\u002Fdaejunpark.github.io\u002F","\u003Cp\u003E\u003Cspan style=\"font-weight: 400\"\u003EDaejun Park is a Senior Blockchain Security Engineer at a16z crypto, developing formal methods and tools for web3 security to help portfolio companies in particular and the web3 community in general to raise their security bar.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400\"\u003EPrior to joining a16z crypto, he was a Director of Formal Verification at Runtime Verification, a research-based startup offering formal verification tools and services, where he led a team of formal verification engineers and security auditors for smart contracts and consensus protocols. Early in his career, he was a founding member of another tech startup Sparrow, where he designed and implemented static program analysis tools that detect memory safety errors for embedded systems software.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan style=\"font-weight: 400\"\u003EHe received a Ph.D. in Computer Science from the University of Illinois at Urbana-Champaign, and his B.S. and M.S. degrees from Seoul National University. His work on language-parametric program verification received the Distinguished Paper Award at OOPSLA'16.\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n",1920,1080,2073600,"image\u002Fjpeg","antonio-viggiano","Release notes: Halmos v0.1.0","daniel-reynaud","We cover the challenges of formal verification, and the potential to bridge the gap between unit testing and formal verification with symbolic testing.",{},"Enter email address",Array(5),Array(6),Array(7),1732,1733,193,1801,1841,"zero knowledge","zkps-zero-knowledge-proofs-systems-more",1793,"WTUVKUCXZLYAD\u003Cbr \u002F\u003EGGCMUGJX","AGO + TO = 404",11889,"2024-08-28 07:23:50",11891,"2024-08-28 07:24:22",11890,"2024-08-28 07:24:09",11892,"2024-08-28 07:24:41","image\u002Fpng","png",400,11893,"2024-08-28 07:24:55",11894,"chainpatrol","2024-08-28 07:25:09",12010,"2024-09-03 23:22:08",12009,"2024-09-03 23:18:44",11895,"discove","2024-08-28 07:25:23",12011,"2024-09-03 23:23:25",11896,"2024-08-28 07:25:59",11897,"fancraze","2024-08-28 07:26:17",11899,"fine","2024-08-28 07:27:51",11900,"2024-08-28 07:28:30",11898,"formless","2024-08-28 07:26:37",11901,"frens","2024-08-28 07:28:57",11902,"fuul","2024-08-28 07:29:31",11903,"2024-08-28 07:29:48",11904,"2024-08-28 07:30:10",11906,"2024-08-28 07:30:35","kiki",11905,"2024-08-28 07:30:29",12012,"2024-09-03 23:28:51",11907,11908,11909,11910,12013,"2024-09-03 23:30:15",12014,"2024-09-03 23:31:13",12015,"2024-09-03 23:31:59",11911,"notion-finance",12016,"2024-09-03 23:33:28","phantom",11912,"pimlico",11913,12017,11879,11914,12018,11915,12019,"2024-09-03 23:36:41",11916,12020,"2024-09-03 23:37:29",11917,11918,"teller",11919,12021,"logo_black","2024-09-03 23:40:11",11920,"triangle-labs",12022,"2024-09-03 23:41:18",11921,"web3analytics",11922,"zero-dev",12023,"2024-09-03 23:42:11",11924,"cta-backgrtound","2024-08-28 07:35:56",4821,"2023-02-23 07:58:29","about",4822,"portfolio",3770,"posts","Custom Link",4823,6202,"12",5,4820,"accelerator",6,10280,"crypto index",{},"airdrops","announcements","banking","bitcoin","compensation","composability","consensus","cryptography","custody","cypherpunk","danksharding","debanking","economics","gaming","gas","gov","governance","helios","history","infrastructure","investments","lockups","metaverse","playbooks","pricing","privacy","programming","rollups","roundups","royalties","rulemaking","slashing","solana","stablecoins","tokens","video","voting","wallets","listicles","videos","https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Farticle\u002Fformal-verification-of-pectra-system-contracts-with-halmos\u002F",2008,"Plaintext","https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Farticle\u002Fimplementing-stateful-invariant-testing-with-halmos\u002F","Pro-tip: Implementing stateful invariant testing with Halmos","https:\u002F\u002Fapi.a16zcrypto.com\u002Fwp-content\u002Fuploads\u002F2024\u002F02\u002FProTip_Halmos_1920x1080.jpg",1923,"Halmos v0.1.0 is out, and it’s a big release focused on speeding up performance and improving developer experience.","https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Farticle\u002Frelease-notes-halmos-v0-1-0\u002F","Halmos v0.1.0 is out, and it’s a big release focused on performance and developer experience.","2023-02-02 12:08:38","Symbolic testing with Halmos for formal verification - a16z crypto","https:\u002F\u002Fapi.a16zcrypto.com\u002Fposts\u002Farticle\u002Fsymbolic-testing-with-halmos-leveraging-existing-tests-for-formal-verification\u002F")));